#!/bin/bash

# Copyright (c) 2011-2014 CrystaX .NET.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice, this list of
#       conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright notice, this list
#       of conditions and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY CrystaX .NET ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CrystaX .NET OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those of the
# authors and should not be interpreted as representing official policies, either expressed
# or implied, of CrystaX .NET.

PROGDIR=`dirname $0`
PROGDIR=`cd $PROGDIR && pwd`

# Assume that we are under tests/
# and that the samples will be under samples/ and platforms/android-N/samples/
#
ROOTDIR=`cd $PROGDIR/.. && pwd`
NDK_BUILDTOOLS_PATH=$ROOTDIR/build/tools
. $NDK_BUILDTOOLS_PATH/ndk-common.sh
. $NDK_BUILDTOOLS_PATH/prebuilt-common.sh

PROGRAM_PARAMETERS=""

PROGRAM_DESCRIPTION=\
"Test Boost libraries built for the CrystaX NDK.

This requires a temporary NDK installation containing
toolchain binaries for all target architectures.

By default, this will try with the current NDK directory, unless
you use the --ndk-dir=<path> option.
"

NDK_DIR=$ANDROID_NDK_ROOT
register_var_option "--ndk-dir=<path>" NDK_DIR "Specify NDK root path for the build"

TEST_DIR=$HOME/.crystax/boost
OPTION_TEST_DIR=
register_var_option "--test-dir=<path>" OPTION_TEST_DIR "Specify test directory [$TEST_DIR]"

ABIS="$PREBUILT_ABIS"
register_var_option "--abis=<list>" ABIS "Specify list of target ABIs"

ADB=adb
register_var_option "--adb=<path>" ADB "Specify which adb to use"

LIBRARIES=all
register_var_option "--libraries=<list>" LIBRARIES "Explicit list of libraries to test"

DEVICE_PATH=/data/local/tmp/boost-tests
register_var_option "--device-path=<path>" DEVICE_PATH "Path on device where to push files"

RESULTS_PATH=$TEST_DIR/report
register_var_option "--results=<path>" RESULTS_PATH "Path where to store tests results (in HTML)"

ENABLE_PIE=yes
register_option "--pie" do_pie "Produce PIE-enabled binaries to test (default)"
do_pie () { ENABLE_PIE=yes; }
register_option "--no-pie" do_no_pie "Produce PIE-disabled binaries to test"
do_no_pie () { ENABLE_PIE=no; }

SKIP_FETCH=no
register_option "--skip-fetch" do_skip_fetch "Skip fetching of Boost sources"
do_skip_fetch () { SKIP_FETCH=yes; }

SKIP_REGRESSION=no
register_option "--skip-regression" do_skip_regression "Skip regression testing"
do_skip_regression () { SKIP_REGRESSION=yes; }

SKIP_LOGS_UPLOAD=no
register_option "--skip-logs-upload" do_skip_logs_upload "Skip uploading of logs to FTP"
do_skip_logs_upload () { SKIP_LOGS_UPLOAD=yes; }

SKIP_REPORT=no
register_option "--skip-report" do_skip_report "Skip report generation"
do_skip_report () { SKIP_REPORT=yes; }

TOOLCHAIN_VERSIONS=gcc-4.9,gcc-4.8,clang-3.5,clang-3.4
register_var_option "--toolchain-versions=<ver>" TOOLCHAIN_VERSIONS "Toolchain versions"

TAG="master"
register_var_option "--tag=<value>" TAG "Boost tag to test ('master' or 'develop')"

LIBCRYSTAX=$NDK_DIR/$CRYSTAX_SUBDIR

ICU_VERSION=$(ls -1 $NDK_DIR/$ICU_SUBDIR/ 2>/dev/null | head -n 1)
if [ -n "$ICU_VERSION" ]; then
    ICU=$NDK_DIR/$ICU_SUBDIR/$ICU_VERSION
else
    ICU=""
fi

BOOST_GIT_URL=https://github.com/boostorg/boost

register_jobs_option

extract_parameters "$@"

ABIS=$(commas_to_spaces $ABIS)
TOOLCHAIN_VERSIONS=$(commas_to_spaces $TOOLCHAIN_VERSIONS)

case $TAG in
    master|develop)
        ;;
    *)
        panic "Wrong tag value: '$TAG'"
esac

if [ -n "$OPTION_TEST_DIR" ]; then
    eval TEST_DIR=$OPTION_TEST_DIR
fi
mkdir -p "$TEST_DIR"
fail_panic "Cannot create test directory: $TEST_DIR"

setup_default_log_file $TEST_DIR/test.log

LOCKDIR="$TEST_DIR/lock"
rm -Rf "$LOCKDIR"
mkdir -p "$LOCKDIR"
fail_panic "Cannot create lock directory: $LOCKDIR"

mkdir -p $RESULTS_PATH
fail_panic "Cannot create results directory: $RESULTS_PATH"

STDBUF=
which stdbuf >/dev/null 2>&1 && STDBUF="stdbuf -o0"

mkcatlog()
{
    echo 'catlog ()'
    echo '{'
    if [ "$VERBOSE" = "yes" ] ; then
        echo '    cat'
    fi
    if [ -n "$TMPLOG" ] ; then
        echo '    cat >> '$TMPLOG
    fi
    echo '}'
}

mktool()
{
    local tool="$1"
    mkdir -p $(dirname $tool)
    fail_panic "Cannot create parent directory for tool $tool"
    cat >$tool
    fail_panic "Cannot create tool $tool"
    chmod +x $tool
    fail_panic "Cannot chmod +x $tool"
}

adb_getprop()
{
    local PROPNAME=$1
    $ADB shell getprop $PROPNAME | tr -d '\r'
}

adb_devices()
{
    local ABI=$1
    local D C CPU_ABI CPU_ABI2 CPU_ABIS
    local APILEVEL

    $ADB devices | tr -d '\r' | sed -e '1d' | grep '\<device$' | sed -e 's/^\([^\t]*\).*$/\1/' | {
    while read D; do
        if [ -z "$ABI" ]; then
            echo "$D"
            continue
        fi

        export ANDROID_SERIAL="$D"
        APILEVEL=$(adb_getprop ro.build.version.sdk)
        if [ "$ENABLE_PIE" = "yes" ]; then
            if [ $APILEVEL -le 15 ]; then
                #echo "SKIP test on $D: android-$APILEVEL don't support PIE-enabled binaries"
                continue
            fi
        else
            if [ $APILEVEL -ge 21 ]; then
                #echo "SKIP test on $D: android-$APILEVEL don't support non-PIE binaries"
                continue
            fi
        fi

        CPU_ABIS=$(adb_getprop ro.product.cpu.abilist)
        if [ -z "$CPU_ABIS" ]; then
            CPU_ABI=$(adb_getprop ro.product.cpu.abi)
            CPU_ABI2=$(adb_getprop ro.product.cpu.abi2)
            CPU_ABIS="$CPU_ABI,$CPU_ABI2"
        fi
        CPU_ABIS=$(echo $CPU_ABIS | tr ',' ' ')
        if echo $CPU_ABIS | tr ' ' '\n' | grep -q -x armeabi-v7a; then
            CPU_ABIS="$CPU_ABIS armeabi-v7a-hard"
        fi
        DEVICE_ABI=$(echo $CPU_ABIS | tr ' ' '\n' | head -n 1)
        for C in $CPU_ABIS; do
            if [ "$C" != "$ABI" ]; then
                continue
            fi

            # Special case: Dell Venue x86 tablet specify 'ro.product.cpu.abi=x86' and 'ro.product.cpu.abi2=armeabi-v7a'.
            # However, only non-PIE-enabled armeabi-v7a binaries supported, even though for x86 binaries usual
            # rules applied - i.e. PIE binaries works starting from android-16 and non-PIE binaries works only up to android-19.
            case $C in
                armeabi-v7a*)
                    if [ "$DEVICE_ABI" = "x86" -a "$ENABLE_PIE" = "yes" ]; then
                        continue
                    fi
                    ;;
            esac

            echo "$D"
        done
    done
    }
}

cleanup()
{
    adb_devices | {
        while read D; do
            $ADB -s "$D" shell "rm -r $DEVICE_PATH 2>/dev/null"
        done
    }
}

trap "cleanup" EXIT QUIT ABRT TERM
trap "echo 'INTERRUPTED'; exit 1" INT

# $1: ABI
# $2: toolchain type (gcc or clang)
# $3: toolchain version
# $4: target directory
generate_toolchain()
{
    local ABI=$1
    local TOOLCHAIN_TYPE=$2
    local TOOLCHAIN_VERSION=$3
    local DIR=$4

    local APILEVEL=9
    if [ ${ABI%%64*} != ${ABI} ]; then
        APILEVEL=21
    fi

    local TCNAME
    case $ABI in
        armeabi*)
            TCNAME=arm-linux-androideabi
            ;;
        arm64*)
            TCNAME=aarch64-linux-android
            ;;
        mips)
            TCNAME=mipsel-linux-android
            ;;
        mips64)
            TCNAME=mips64el-linux-android
            ;;
        x86|x86_64)
            TCNAME=$ABI
            ;;
        *)
            echo "ERROR: Unknown ABI: $ABI" 1>&2
            exit 1
    esac

    local TCPREFIX
    case $ABI in
        x86)
            TCPREFIX=i686-linux-android
            ;;
        x86_64)
            TCPREFIX=x86_64-linux-android
            ;;
        *)
            TCPREFIX=$TCNAME
    esac

    local LLVMTRIPPLE
    case $ABI in
        armeabi)
            LLVMTRIPPLE=armv5te-none-linux-androideabi
            ;;
        armeabi-v7a*)
            LLVMTRIPPLE=armv7-none-linux-androideabi
            ;;
        arm64-v8a)
            LLVMTRIPPLE=aarch64-none-linux-android
            ;;
        x86)
            LLVMTRIPPLE=i686-none-linux-android
            ;;
        x86_64)
            LLVMTRIPPLE=x86_64-none-linux-android
            ;;
        mips)
            LLVMTRIPPLE=mipsel-none-linux-android
            ;;
        mips64)
            LLVMTRIPPLE=mips64el-none-linux-android
            ;;
        *)
            echo "ERROR: Unknown ABI: $ABI" 1>&2
            exit 1
    esac

    local ARCH
    case $ABI in
        armeabi*)
            ARCH=arm
            ;;
        arm64*)
            ARCH=arm64
            ;;
        *)
            ARCH=$ABI
    esac

    local FLAGS LFLAGS
    case $ABI in
        armeabi)
            FLAGS="-march=armv5te -mtune=xscale -msoft-float"
            ;;
        armeabi-v7a)
            FLAGS="-march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=softfp"
            LFLAGS="-Wl,--fix-cortex-a8"
            ;;
        armeabi-v7a-hard)
            FLAGS="-march=armv7-a -mfpu=vfpv3-d16 -mhard-float"
            LFLAGS="-Wl,--fix-cortex-a8"
            LFLAGS="$LFLAGS -Wl,--no-warn-mismatch"
            ;;
        arm64-v8a)
            FLAGS=""
            ;;
        x86)
            FLAGS="-m32"
            ;;
        x86_64)
            FLAGS="-m64"
            ;;
        mips)
            FLAGS="-mabi=32 -mips32"
            ;;
        mips64)
            FLAGS="-mabi=64 -mips64r6"
            ;;
    esac

    local GCCTCPATH
    local CCS
    case $TOOLCHAIN_TYPE in
        gcc)
            GCCTCPATH=$NDK_DIR/toolchains/$TCNAME-$TOOLCHAIN_VERSION/prebuilt/$HOST_TAG
            CCS="gcc g++"
            GNULIBCXX_VERSION=$TOOLCHAIN_VERSION
            ;;
        clang)
            LLVMGCCVERSION=4.9
            GCCTCPATH=$NDK_DIR/toolchains/$TCNAME-$LLVMGCCVERSION/prebuilt/$HOST_TAG
            LLVMTCPATH=$NDK_DIR/toolchains/llvm-$TOOLCHAIN_VERSION/prebuilt/$HOST_TAG
            CCS="clang clang++"
            GNULIBCXX_VERSION=$LLVMGCCVERSION
            ;;
        *)
            echo "ERROR: Unknown toolchain type: $TOOLCHAIN_TYPE" 1>&2
            exit 1
    esac

    local SYSROOT=$NDK_DIR/platforms/android-$APILEVEL/arch-$ARCH
    local GNULIBCXX=$NDK_DIR/sources/cxx-stl/gnu-libstdc++/$GNULIBCXX_VERSION

    FLAGS="$FLAGS --sysroot=$SYSROOT"

    FLAGS="$FLAGS -fPIC"
    if [ "$ENABLE_PIE" = "yes" ]; then
        FLAGS="$FLAGS -fPIE"
        LFLAGS="$LFLAGS -pie"
    fi

    local TOOL
    for TOOL in $CCS; do
        {
            echo "#!/bin/sh"
            echo ''
            mkcatlog
            echo ''

            cat <<EOF
if echo "\$@" | tr ' ' '\\n' | grep -q -x -e -c; then
    LINKER=no
else
    LINKER=yes
fi

# Remove any -m32/-m64 from input parameters
PARAMS=\`echo "\$@" | tr ' ' '\\n' | grep -v -x -e -m32 | grep -v -x -e -m64 | tr '\\n' ' '\`
if [ "x\$LINKER" = "xyes" ]; then
    NPARAMS=""
    for p in \$PARAMS; do
        case \$p in
            -lrt|-pthread|-lpthread)
                continue
                ;;
        esac

        NPARAMS="\$NPARAMS \$p"
    done
    PARAMS=\$NPARAMS
fi

FLAGS="$FLAGS"
if [ "x\$LINKER" = "xyes" ]; then
    FLAGS="\$FLAGS $LFLAGS"
    if [ "x$ICU" != "x" ]; then
        FLAGS="\$FLAGS -L$ICU/libs/$ABI"
    fi
    FLAGS="\$FLAGS -L$LIBCRYSTAX/libs/$ABI"
    FLAGS="\$FLAGS -L$GNULIBCXX/libs/$ABI"
else
    if [ "x$ICU" != "x" ]; then
        FLAGS="\$FLAGS -I$ICU/include"
    fi
    FLAGS="\$FLAGS -I$GNULIBCXX/include"
    FLAGS="\$FLAGS -I$GNULIBCXX/libs/$ABI/include"
    FLAGS="\$FLAGS -I$LIBCRYSTAX/include"
    FLAGS="\$FLAGS -Wno-long-long"
fi

PARAMS="\$FLAGS \$PARAMS"
if [ "x\$LINKER" = "xyes" ]; then
    PARAMS="\$PARAMS -lgnustl_shared"
fi

run()
{
    echo "## COMMAND: \$@" | catlog
    exec "\$@"
}
EOF

            case $TOOLCHAIN_TYPE in
                gcc)
                    echo "run $GCCTCPATH/bin/$TCPREFIX-$TOOL \$PARAMS"
                    ;;
                clang)
                    echo "run $LLVMTCPATH/bin/$TOOL \\"
                    echo "    -target $LLVMTRIPPLE \\"
                    echo "    -gcc-toolchain $GCCTCPATH \\"
                    echo "    \$PARAMS"
                    ;;
                *)
                    echo "echo 'WRONG TOOLCHAIN TYPE: $TOOLCHAIN_TYPE' 1>&2"
                    echo "exit 1"
            esac
        } | mktool $DIR/$TOOL-$TOOLCHAIN_VERSION
        fail_panic "Cannot create target tool $TOOL"
    done

    for TOOL in as ar; do
        {
            echo "#!/bin/sh"
            echo 'run()'
            echo '{'
            echo ''
            mkcatlog
            echo ''
            echo '    echo "## COMMAND: $@" | catlog'
            echo '    exec "$@"'
            echo '}'
            case $TOOLCHAIN_TYPE in
                gcc)
                    echo "run $GCCTCPATH/bin/$TCPREFIX-$TOOL \"\$@\""
                    ;;
                clang)
                    echo "run $LLVMTCPATH/bin/llvm-$TOOL \"\$@\""
                    ;;
                *)
                    echo "echo 'WRONG TOOLCHAIN TYPE: $TOOLCHAIN_TYPE' 1>&2"
                    echo "exit 1"
            esac
        } | mktool $DIR/$TOOL
        fail_panic "Cannot create target tool $TOOL"
    done

    for TOOL in ranlib strip; do
        {
            echo "#!/bin/sh"
            echo 'run()'
            echo '{'
            echo ''
            mkcatlog
            echo ''
            echo '    echo "## COMMAND: $@" | catlog'
            echo '    exec "$@"'
            echo '}'
            echo "run $GCCTCPATH/bin/$TCPREFIX-$TOOL \"\$@\""
        } | mktool $DIR/$TOOL
        fail_panic "Cannot create target tool $TOOL"
    done
}

# $1: output file
generate_flock()
{
    local OUT="$1"
    local TMPFILE=$(mktemp /tmp/flockXXXXXX.c)

    cat >$TMPFILE <<EOF
#include <stdlib.h>
#include <sys/file.h>

int main(int argc, char *argv[])
{
    int fd;
    char *p;

    if (argc != 2)
        return 1;

    fd = strtol(argv[1], &p, 10);
    if (fd == 0 && p == argv[1])
        return 1;

    if (flock(fd, LOCK_EX) == -1)
        return 1;

    return 0;
}
EOF
    fail_panic "Cannot create temporary flock source file"

    cc -o $OUT $TMPFILE
    fail_panic "Cannot create flock utility"

    rm -f $TMPFILE
}

# $1: ABI
# $2: target directory
# $3: flock utility
generate_adbrunner()
{
    local ABI=$1
    local DIR=$2
    local FLOCK=$3

    local ADBRUNNER=$DIR/adbrunner
    {
        echo '#!/bin/bash'
        echo ''
        mkcatlog
        echo ''
        echo 'MYCMD="$0 $@"'
        echo ''
        echo 'echo "## COMMAND: $MYCMD" | catlog'
        echo ''
        echo 'F=$1'
        echo 'shift'
        echo 'ARGS="$@"'
        echo 'BF=$(basename $F)'
        echo 'DEVPATH='$DEVICE_PATH/$ABI
        echo 'DSTPATH=$DEVPATH/$(uuidgen)'
        echo 'ADB='$ADB
        echo 'STRIP='$DIR/strip
        echo 'LOCKDIR='$LOCKDIR
        echo 'FLOCK='$FLOCK
        echo 'PREFIX="ADBRUNNER.$$"'
        echo 'STDBUF="'$STDBUF'"'
        echo ''
        echo 'EXTRAS=""'
        echo 'for DIR in $(echo $LD_LIBRARY_PATH $DYLD_LIBRARY_PATH | tr ":" "\\n"); do'
        echo '    for LIB in $(find $DIR -name "lib*.so*" -print 2>/dev/null); do'
        echo '        basename $LIB | grep -q -x libcrystax.so && continue'
        echo '        basename $LIB | grep -q -x libgnustl_shared.so && continue'
        echo '        basename $LIB | grep -q "^libicu.*" && continue'
        echo '        EXTRAS="$EXTRAS $LIB"'
        echo '    done'
        echo 'done'
        echo ''
        echo 'adb_shell()'
        echo '{'
        echo '    local CMD="$@"'
        echo '    local ADBCAP=$F.adbcap.$(uuidgen)'
        echo '    echo "## $PREFIX [$ANDROID_SERIAL] RUN: $CMD" | catlog'
        echo '    rm -f $ADBCAP'
        echo '    $ADB shell "$CMD ; echo \$?" 2>&1 \'
        echo '        | sed -e "s,[[:cntrl:]],,g" | $STDBUF tee $ADBCAP | catlog'
        echo '    RC=$(sed -e "\$!d" $ADBCAP 2>/dev/null)'
        echo '    sed -e "\$d" $ADBCAP'
        echo '    rm -f $ADBCAP'
        echo '    return $RC'
        echo '}'
        echo ''
        echo 'adb_push()'
        echo '{'
        echo '    local SRC="$1"'
        echo '    local DST="$2"'
        echo '    local BSRC'
        echo ''
        echo '    if [ -d $SRC ]; then'
        echo '        BSRC=$(basename $SRC)'
        echo '        adb_shell "mkdir -p $DST/$BSRC"'
        echo '        RC=$?'
        echo '        if [ $RC -ne 0 ]; then'
        echo '            echo "## $PREFIX [$ANDROID_SERIAL] PUSH FAILED: $SRC" | catlog'
        echo '            $ADB shell "rm -r $DST" >/dev/null 2>&1'
        echo '            return $RC'
        echo '        fi'
        echo '        DST=$DST/$BSRC'
        echo '    fi'
        echo ''
        echo '    local CMD="$ADB push $SRC $DST"'
        echo '    echo "## $PREFIX [$ANDROID_SERIAL] PUSH: $CMD" | catlog'
        echo '    $CMD 2>&1 | catlog'
        echo '    RC=$?'
        echo '    if [ $RC -ne 0 ]; then'
        echo '        echo "## $PREFIX [$ANDROID_SERIAL] PUSH FAILED: $SRC" | catlog'
        echo '        $ADB shell "rm -r $DST" >/dev/null 2>&1'
        echo '        return $RC'
        echo '    fi'
        echo ''
        echo '    return 0'
        echo '}'
        echo ''
        echo '{'
        echo '    cat <<EOD'
        adb_devices $ABI
        echo 'EOD'
        echo '} | {'
        echo 'while read D; do'
        echo '    mkdir -p $LOCKDIR >/dev/null 2>&1'
        echo '    ('
        echo '    export ANDROID_SERIAL="$D"'
        echo ''
        echo '    $FLOCK 3'
        echo '    if [ $? -ne 0 ]; then'
        echo '        echo "## $PREFIX [$ANDROID_SERIAL] LOCK FAILED" | catlog'
        echo '    fi'
        echo ''
        echo '    $ADB shell "rm -r $DSTPATH" >/dev/null 2>&1'
        echo '    adb_shell "mkdir -p $DSTPATH"'
        echo ''
        echo '    for E in $F $EXTRAS; do'
        echo '        BE=$(basename $E)'
        echo '        $STRIP --strip-unneeded $E >/dev/null 2>&1'
        echo '        adb_push "$E" "$DSTPATH/$BE" && adb_shell "chmod 0755 $DSTPATH/$BE"'
        echo '        if [ $? -ne 0 ]; then'
        echo '            echo "## $PREFIX [$ANDROID_SERIAL] SKIP: $F" | catlog'
        echo '            exit 0'
        echo '        fi'
        echo '    done'
        echo ''
        echo '    NEWARGS=""'
        echo '    for E in $ARGS; do'
        echo '        if [ -e $E ]; then'
        echo '            BE=$(basename $E)'
        echo '            adb_push "$E" "$DSTPATH/$BE"'
        echo '            if [ $? -ne 0 ]; then'
        echo '                echo "## $PREFIX [$ANDROID_SERIAL] SKIP: $F" | catlog'
        echo '                exit 0'
        echo '            fi'
        echo '            NEWARGS="$NEWARGS $DSTPATH/$BE"'
        echo '        else'
        echo '            NEWARGS="$NEWARGS $E"'
        echo '        fi'
        echo '    done'
        echo ''
        echo '    adb_shell "cd $DSTPATH && LD_LIBRARY_PATH=$DEVPATH/lib:$DSTPATH TMPDIR=$DEVPATH/tmp ./$BF $NEWARGS"'
        echo '    RC=$?'
        echo '    $ADB shell "rm -r $DSTPATH" >/dev/null 2>&1'
        echo '    if [ $RC -ne 0 ]; then'
        echo '        echo "## $PREFIX [$ANDROID_SERIAL] RUN FAILED [\$?=$RC]: $F" | catlog'
        echo '        exit $RC'
        echo '    fi'
        echo ''
        echo '    exit 0'
        echo ''
        echo '    ) 3>"$LOCKDIR/$D.lock"'
        echo '    RC=$?'
        echo '    test $RC -eq 0 || exit $RC'
        echo 'done'
        echo ''
        echo 'exit 0'
        echo '}'
    } | mktool $ADBRUNNER

}

# $1: ABI
# $2: intermediate directory to copy libraries to strip
# $3: full path to strip utility
prepare_device()
{
    local ABI=$1
    local DIR=$2
    local STRIP=$3

    local GNULIBCXX=$NDK_DIR/sources/cxx-stl/gnu-libstdc++/4.9

    {
        adb_devices $ABI
    } | {
        rm -Rf $DIR
        run mkdir -p $DIR
        fail_panic "Cannot create temporary $ABI target libraries directory"

        while read D; do
            run $ADB -s "$D" shell "rm -r $DEVICE_PATH/$ABI 2>/dev/null"
            run $ADB -s "$D" shell "mkdir -p $DEVICE_PATH/$ABI/tmp"
            run $ADB -s "$D" shell "mkdir -p $DEVICE_PATH/$ABI/lib"

            for F in \
                $LIBCRYSTAX/libs/$ABI/libcrystax.so \
                $GNULIBCXX/libs/$ABI/libgnustl_shared.so \
                $ICU/libs/$ABI/lib*.so \
                ; do

                run cp -f $F $DIR/
                fail_panic "Cannot copy $F to $DIR"
            done

            for F in $DIR/lib*.so; do
                run $STRIP --strip-unneeded $F
                fail_panic "Cannot strip $F"
                run $ADB -s "$D" push $F $DEVICE_PATH/$ABI/lib
                fail_panic "Cannot push $F to $D"
            done
        done
    }
}

# $1: target directory
copy_boost()
{
    local DIR="$1"

    rm -Rf $DIR
    fail_panic "Cannot remove $DIR"

    run mkdir -p $(dirname $DIR)
    fail_panic "Cannot create target directory for copying Boost sources"

    run ln -s "$BOOST_SRCDIR" "$DIR"
    fail_panic "Cannot symlink Boost sources"
}

copy_boost_bb()
{
    local DIR="$1"

    rm -Rf $DIR
    fail_panic "Cannot remote $DIR"

    run mkdir -p $(dirname $DIR)
    fail_panic "Cannot create target directory for copying Boost build sources"

    run cp -r "$BOOST_BB_SRCDIR" "$DIR"
    fail_panic "Cannot copy Boost build sources"
}

copy_boost_rr()
{
    local DIR="$1"

    rm -Rf $DIR
    fail_panic "Cannot remote $DIR"

    run mkdir -p $(dirname $DIR)
    fail_panic "Cannot create target directory for copying Boost regression sources"

    run cp -r "$BOOST_RR_SRCDIR" "$DIR"
    fail_panic "Cannot copy Boost regression sources"
}

prepare_boost_tools()
{
    local DIR="$1"

    mkdir -p $DIR
    fail_panic "Cannot create boost sources directory"

    local RUNPY=$DIR/run.py

    run cp -f $BOOST_RR_SRCDIR/src/run.py $RUNPY
    fail_panic "Cannot retrieve run.py"

    chmod +x $RUNPY
    fail_panic "Cannot chmod +x run.py"

    log "Downloading regression scripts..."
    # download-scripts is a fake target
    # We run it because run.py download all needed scripts before
    # doing anything else. With this hack we can download them once (now)
    # and then use --skip-script-download for subsequent runs"
    run $RUNPY download-scripts 2>&1 | catlog
    RUNPY="$RUNPY --skip-script-download"

    RUNPY="$RUNPY --tag=$TAG"

    copy_boost_bb "$DIR/boost_bb"
    copy_boost_rr "$DIR/boost_regression"

    local BOOST_REGRESSION_SRC="$DIR/boost_regression_src"
    run mkdir -p $BOOST_REGRESSION_SRC
    fail_panic "Cannot create $BOOST_REGRESSION_SRC"

    local SCRIPT
    for SCRIPT in collect_and_upload_logs.py process_jam_log.py regression.py; do
        run cp -f "$DIR/boost_regression/src/$SCRIPT" "$BOOST_REGRESSION_SRC/"
        fail_panic "Cannot copy $SCRIPT to $BOOST_REGRESSION_SRC"
    done

    run $RUNPY --bjam-options="-j$NUM_JOBS" setup 2>&1 | catlog
    test ${PIPESTATUS[0]} -eq 0 || panic "Cannot setup regression tools"
}

# $1: ABI
# $2: test directory
test_boost_for_abi ()
{
    local ABI="$1"
    local TESTDIR="$2"
    local SRCDIR="$TESTDIR/test"

    dump "Run regression testing [$ABI]"

    rm -Rf $TESTDIR $SRCDIR
    run mkdir -p $TESTDIR && run mkdir -p $SRCDIR
    fail_panic "Cannot create temporary directory for $ABI testing"

    local FLOCK=$TESTDIR/flock
    generate_flock $FLOCK

    # Generate adbrunner tool
    generate_adbrunner "$ABI" "$TESTDIR" "$FLOCK"

    local STRIP=""
    local TOOLSETS=""
    local TOOLSETS_PATH=""
    local TOOLSET
    local TOOLCHAIN_TYPE TOOLCHAIN_VERSION
    local CXXBIN

    local CONFIGJAM="$TESTDIR/config.jam"
    rm -f $CONFIGJAM

    for TOOLCHAIN_VERSION in $TOOLCHAIN_VERSIONS; do
        if [ ${TOOLCHAIN_VERSION#clang} != ${TOOLCHAIN_VERSION} ]; then
            TOOLCHAIN_TYPE=clang
            TOOLCHAIN_VERSION=${TOOLCHAIN_VERSION#clang-}
            TOOLCHAIN_VERSION=${TOOLCHAIN_VERSION#clang}
            CXXBIN=clang++-$TOOLCHAIN_VERSION
        else
            TOOLCHAIN_TYPE=gcc
            TOOLCHAIN_VERSION=${TOOLCHAIN_VERSION#gcc-}
            TOOLCHAIN_VERSION=${TOOLCHAIN_VERSION#gcc}
            CXXBIN=g++-$TOOLCHAIN_VERSION
        fi

        TOOLSET=${TOOLCHAIN_TYPE}-${TOOLCHAIN_VERSION}

        local TARGETBIN=$TESTDIR/${TOOLSET}
        rm -Rf $TARGETBIN

        # Generate toolchain wrappers
        generate_toolchain "$ABI" "$TOOLCHAIN_TYPE" "$TOOLCHAIN_VERSION" "$TARGETBIN"

        if [ -z "$TOOLSETS" ]; then
            TOOLSETS=$TOOLSET
        else
            TOOLSETS="$TOOLSETS,$TOOLSET"
        fi

        if [ -z "$TOOLSETS_PATH" ]; then
            TOOLSETS_PATH=$TARGETBIN
        else
            TOOLSETS_PATH=$TOOLSETS_PATH:$TARGETBIN
        fi

        echo "using $TOOLCHAIN_TYPE : $TOOLCHAIN_VERSION : $TARGETBIN/$CXXBIN ;" >>$CONFIGJAM
        fail_panic "Cannot add $TOOLSET to user config"

        if [ -z "$STRIP" -a -x $TARGETBIN/strip ]; then
            STRIP=$TARGETBIN/strip
        fi
    done

    if [ -z "$STRIP" ]; then
        panic "Cannot detect strip for $ABI"
    fi

    # Create directories and copy requires libraries on device
    prepare_device $ABI $TESTDIR/lib $STRIP

    copy_boost "$SRCDIR/boost_root"

    prepare_boost_tools "$SRCDIR"

    local RUNNER="CrystaX.NET-apilevel-19-$ABI"

    local RUNPY="$SRCDIR/run.py --skip-script-download --tag=$TAG"

    EXTRA_PARAMS=""
    if [ -n "$LIBRARIES" -a "$LIBRARIES" != "all" ]; then
        EXTRA_PARAMS="$EXTRA_PARAMS --libraries=$(spaces_to_commas $LIBRARIES)"
    fi

    local BJAM_OPTIONS="                    \
        -j$NUM_JOBS                         \
        variant=release                     \
        link=static,shared                  \
        runtime-link=shared                 \
        threading=multi                     \
        target-os=android                   \
        testing.launcher=$TESTDIR/adbrunner \
        "

    BJAM_OPTIONS=$(echo $BJAM_OPTIONS | tr ' ' '\n' | grep -v '^$' | tr '\n' ' ')

    rm -Rf $SRCDIR/results
    run mkdir $SRCDIR/results
    fail_panic "Cannot create results $ABI directory"

    local ACTIONS="  \
        test-run     \
        test-process \
        collect-logs \
        "
    if [ "$SKIP_LOGS_UPLOAD" != "yes" ]; then
        ACTIONS="$ACTIONS upload-logs"
    fi

    (
        trap "rm -f $SRCDIR/user-config.jam" EXIT INT QUIT ABRT TERM
        cp -f $CONFIGJAM $SRCDIR/user-config.jam

        export PATH=$TOOLSETS_PATH:$PATH

        run $RUNPY                         \
            --runner="$RUNNER"             \
            --toolsets=$TOOLSETS           \
            --platform=Android             \
            --timeout=15                   \
            --bjam-options="$BJAM_OPTIONS" \
            $EXTRA_PARAMS                  \
            $ACTIONS                       \
            2>&1 | catlog
    )

    return 0
}

generate_comment()
{
    local COMMENT=$1
    local DATE=$2
    local PREVIOUS=$3

    cat >$COMMENT <<HTML
<table style="border-spacing: 0.5em;">
    <tr>
        <td style="vertical-align: top;"><tt>uname</tt></td>
        <td>
            <pre style="border: 1px solid #666; overflow: auto;">
`uname -a`
            </pre>
        </td>
    </tr>
    <tr>
        <td style="vertical-align: top;"><tt>uptime</tt></td>
        <td>
            <pre style="border: 1px solid #666; overflow: auto;">
`uptime`
            </pre>
        </td>
    </tr>
    <tr>
        <td style="vertical-align: top;"><tt>python</tt></td>
        <td>
            <pre style="border: 1px solid #666; overflow: auto;">
`python --version 2>&1`
            </pre>
        </td>
    </tr>
    <tr>
        <td style="vertical-align: top;">previous run</td>
        <td>
            <pre style="border: 1px solid #666; overflow: auto;">
$PREVIOUS
            </pre>
        </td>
    </tr>
    <tr>
        <td style="vertical-align: top;">current run</td>
        <td>
            <pre style="border: 1px solid #666; overflow: auto;">
$DATE
            </pre>
        </td>
    </tr>
</table>
HTML
    fail_panic "Cannot generate comment.html"
}

generate_report()
{
    local DIR="$1"

    run mkdir -p $DIR
    fail_panic "Cannot create report directory"

    dump "Retrieving sources"

    local BOOST_ROOT="$DIR/boost_root"
    copy_boost "$BOOST_ROOT"

    local BOOST_BB="$DIR/boost_bb"
    copy_boost_bb "$BOOST_BB"

    local BOOST_RR=$DIR/boost_regression
    copy_boost_rr "$BOOST_RR"

    local BJAM=$BOOST_BB/b2

    if [ ! -x $BJAM ]; then
        dump "Building bjam"

        (
        cd $DIR/boost_bb || exit 1

        run ./bootstrap.sh 2>&1 | catlog
        test ${PIPESTATUS[0]} -eq 0 || exit 1
        )
        fail_panic "Cannot build bjam"

        if [ ! -x $BJAM ]; then
            panic "Cannot find just build bjam"
        fi
    fi

    local BREP=$BOOST_RR/build/bin_boost_report/boost_report

    if [ ! -x $BREP ]; then
        dump "Building boost_report"

        (
        cd $BOOST_RR/build || exit 1

        run $BJAM                           \
            --boost-build=$DIR/boost_bb/src \
            --boost-root=$BOOST_ROOT        \
            --bjam-options="-j$NUM_JOBS"    \
            bin_boost_report                \
            2>&1 | catlog
        test ${PIPESTATUS[0]} -eq 0 || exit 1
        )
        fail_panic "Cannot build bin_boost_report"

        if [ ! -x $BREP ]; then
            panic "Cannot find just built boost_report"
        fi
    fi

    dump "Generating HTML report"

    run mkdir -p $DIR/results
    fail_panic "Cannot create results directory"

    local COMMENT=$DIR/results/mycomment.html
    local DATEFILE=$DIR/results/previous.txt
    local DATE=$(date -u)
    local PREVIOUS=$(cat $DATEFILE 2>/dev/null)

    (
        cd $DIR/results || exit 1

        generate_comment "$COMMENT" "$DATE" "$PREVIOUS"

        run python $BOOST_RR/xsl_reports/boost_wide_report.py                   \
            --locate-root="$BOOST_ROOT"                                         \
            --tag=$TAG                                                          \
            --expected-results="$BOOST_ROOT/status/expected_results.xml"        \
            --failures-markup="$BOOST_ROOT/status/explicit-failures-markup.xml" \
            --comment="$COMMENT"                                                \
            --user=""                                                           \
            --reports="dd,ds,i,n"                                               \
            --boost-report=$BREP                                                \
            --filter-runners=crystax                                            \
            2>&1 | catlog
        test ${PIPESTATUS[0]} -eq 0 || exit 1

        mv -f report.zip $RESULTS_PATH/${TAG}.zip || exit 1
    )
    fail_panic "Cannot generate report"

    echo $DATE >$DATEFILE
    fail_panic "Cannot generate previous.txt"
}

fetch_boost()
{
    local DIR="$1"

    dump "Fetching Boost sources"

    if [ ! -d $DIR ]; then
        run mkdir -p $(dirname $DIR)
        fail_panic "Cannot create parent directory for Boost sources"

        (
            run git clone -b $TAG $BOOST_GIT_URL $DIR 2>&1 | catlog
            test ${PIPESTATUS[0]} -eq 0 || exit 1
        )
        fail_panic "Cannot clone Boost $TAG branch"
    fi

    (
        cd $DIR || exit 1

        run git checkout $TAG 2>&1 | catlog
        test ${PIPESTATUS[0]} -eq 0 || exit 1

        run git pull 2>&1 | catlog
        test ${PIPESTATUS[0]} -eq 0 || exit 1

        run git submodule sync 2>&1 | catlog
        test ${PIPESTATUS[0]} -eq 0 || exit 1

        run git submodule update --recursive --init
        test ${PIPESTATUS[0]} -eq 0 || exit 1
    )
    fail_panic "Cannot update Boost $TAG branch"
}

fetch_boost_bb()
{
    local DIR="$1"

    dump "Fetching Boost build sources"

    if [ ! -d $DIR ]; then
        run git clone -b develop https://github.com/crystax/build.git $DIR 2>&1 | catlog
        test ${PIPESTATUS[0]} -eq 0 || panic "Cannot retrieve Boost build tools sources"
    else
        (
            cd $DIR || exit 1
            run git pull 2>&1 | catlog
            test ${PIPESTATUS[0]} -eq 0 || exit 1
        )
        fail_panic "Cannot update Boost build tools"
    fi
}

fetch_boost_rr()
{
    local DIR="$1"

    dump "Fetching Boost regression sources"

    if [ ! -d $DIR ]; then
        run git clone -b develop https://github.com/crystax/regression.git $DIR 2>&1 | catlog
        test ${PIPESTATUS[0]} -eq 0 || panic "Cannot retrieve regression src"
    else
        (
            cd $DIR || exit 1
            run git pull 2>&1 | catlog
            test ${PIPESTATUS[0]} -eq 0 || exit 1
        )
        fail_panic "Cannot update regression src"
    fi
}

BOOST_SRCDIR=$TEST_DIR/$TAG/src/boost
BOOST_BB_SRCDIR=$TEST_DIR/$TAG/src/boost_bb
BOOST_RR_SRCDIR=$TEST_DIR/$TAG/src/boost_rr

if [ "$SKIP_FETCH" != "yes" ]; then
    fetch_boost $BOOST_SRCDIR
    fetch_boost_bb $BOOST_BB_SRCDIR
    fetch_boost_rr $BOOST_RR_SRCDIR
else
    if [ ! -d $BOOST_SRCDIR ]; then
        panic "Boost sources are not fetched. Cannot continue; Aborting."
    fi
    if [ ! -d $BOOST_BB_SRCDIR ]; then
        panic "Boost build sources are not fetched. Cannot continue; Aborting."
    fi
    if [ ! -d $BOOST_RR_SRCDIR ]; then
        panic "Boost regression sources are not fetched. Cannot continue; Aborting."
    fi
fi

if [ "$SKIP_REGRESSION" != "yes" ]; then
    for ABI in $ABIS; do
        NUM_DEVICES=$(adb_devices $ABI | wc -l)
        if [ $NUM_DEVICES -eq 0 ]; then
            dump "Skip regression tests [$ABI]: no compatible devices found"
            continue
        fi

        log "Found $NUM_DEVICES $ABI-compatible devices"

        test_boost_for_abi "$ABI" "$TEST_DIR/$TAG/regression/$ABI"
    done
fi

if [ "$SKIP_REPORT" != "yes" ]; then
    generate_report "$TEST_DIR/$TAG/report"
fi

dump "Done!"
