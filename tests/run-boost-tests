#!/bin/bash

# Copyright (c) 2011-2014 CrystaX .NET.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice, this list of
#       conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright notice, this list
#       of conditions and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY CrystaX .NET ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CrystaX .NET OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those of the
# authors and should not be interpreted as representing official policies, either expressed
# or implied, of CrystaX .NET.

PROGDIR=`dirname $0`
PROGDIR=`cd $PROGDIR && pwd`

# Assume that we are under tests/
# and that the samples will be under samples/ and platforms/android-N/samples/
#
ROOTDIR=`cd $PROGDIR/.. && pwd`
NDK_BUILDTOOLS_PATH=$ROOTDIR/build/tools
. $NDK_BUILDTOOLS_PATH/ndk-common.sh
. $NDK_BUILDTOOLS_PATH/prebuilt-common.sh

PROGRAM_PARAMETERS="<src-dir>"

PROGRAM_DESCRIPTION=\
"Test Boost libraries built for the CrystaX NDK.

This requires a temporary NDK installation containing
toolchain binaries for all target architectures.

By default, this will try with the current NDK directory, unless
you use the --ndk-dir=<path> option.
"

NDK_DIR=$ANDROID_NDK_ROOT
register_var_option "--ndk-dir=<path>" NDK_DIR "Specify NDK root path for the build"

TEST_DIR=
OPTION_TEST_DIR=
register_var_option "--test-dir=<path>" OPTION_TEST_DIR "Specify temporary test directory"

ABIS="$PREBUILT_ABIS"
register_var_option "--abis=<list>" ABIS "Specify list of target ABIs"

ADB=adb
register_var_option "--adb=<path>" ADB "Specify which adb to use"

TESTS=all
register_var_option "--tests=<list>" TESTS "Specify explicit test cases"

DEVICE_PATH=/data/local/tmp/boost-tests
register_var_option "--device-path=<path>" DEVICE_PATH "Path on device where to push files"

RESULTS_PATH=/tmp/ndk-$USER/boost-test-status
register_var_option "--results=<path>" RESULTS_PATH "Path where to store tests results (in HTML)"

ENABLE_PIE=yes
register_option "--pie" do_pie "Produce PIE-enabled binaries to test (default)"
do_pie () { ENABLE_PIE=yes; }
register_option "--no-pie" do_no_pie "Produce PIE-disabled binaries to test"
do_no_pie () { ENABLE_PIE=no; }

KEEP_GOING=yes
register_option "--keep-going" do_keep_going "Don't fail on first error but continue as much as possible (default)"
do_keep_going () { KEEP_GOING=yes; }
register_option "--no-keep-going" do_no_keep_going "Fail as quick as possible (don't keep going)"
do_no_keep_going () { KEEP_GOING=no; }

TOOLCHAIN_VERSION=4.9
#register_var_option "--toolchain-version=<ver>" TOOLCHAIN_VERSION "Specify toolchain version"

BOOST_VERSION=1.57.0
ICU_VERSION=54.1

register_jobs_option

extract_parameters "$@"

BOOST_SRCDIR=$(echo $PARAMETERS | sed 1q)
if [ -z "$BOOST_SRCDIR" ]; then
    echo "ERROR: Please provide the path to the Boost source tree. See --help"
    exit 1
fi

if [ ! -d "$BOOST_SRCDIR" ]; then
    echo "ERROR: Not a directory: '$BOOST_SRCDIR'"
    exit 1
fi

ABIS=$(commas_to_spaces $ABIS)

if [ -z "$OPTION_TEST_DIR" ]; then
    TEST_DIR=$NDK_TMPDIR/test-boost
else
    eval TEST_DIR=$OPTION_TEST_DIR
fi
rm -rf "$TEST_DIR"
mkdir -p "$TEST_DIR"
fail_panic "Could not create test directory: $TEST_DIR"

setup_default_log_file $TEST_DIR/test.log

LOCKDIR="$TEST_DIR/lck"
rm -Rf "$LOCKDIR"
mkdir -p "$LOCKDIR"
fail_panic "Could not create lock directory: $LOCKDIR"

prepare_target_build
fail_panic "Could not setup target build"

STDBUF=
which stdbuf >/dev/null 2>&1 && STDBUF="stdbuf -o0"

mktool()
{
    local tool="$1"
    cat >$tool
    fail_panic "Could not create tool $tool"
    chmod +x $tool
    fail_panic "Could not chmod +x $tool"
}

adb_getprop()
{
    local PROPNAME=$1
    $ADB shell getprop $PROPNAME | tr -d '\r'
}

adb_devices()
{
    local ABI=$1
    local D C CPU_ABI CPU_ABI2 CPU_ABIS
    local APILEVEL

    $ADB devices | tr -d '\r' | sed -e '1d' | grep '\<device$' | sed -e 's/^\([^\t]*\).*$/\1/' | {
    while read D; do
        if [ -z "$ABI" ]; then
            echo "$D"
            continue
        fi

        export ANDROID_SERIAL="$D"
        APILEVEL=$(adb_getprop ro.build.version.sdk)
        if [ "$ENABLE_PIE" = "yes" ]; then
            if [ $APILEVEL -le 15 ]; then
                #echo "SKIP test on $D: android-$APILEVEL don't support PIE-enabled binaries"
                continue
            fi
        else
            if [ $APILEVEL -ge 21 ]; then
                #echo "SKIP test on $D: android-$APILEVEL don't support non-PIE binaries"
                continue
            fi
        fi

        CPU_ABIS=$(adb_getprop ro.product.cpu.abilist)
        if [ -z "$CPU_ABIS" ]; then
            CPU_ABI=$(adb_getprop ro.product.cpu.abi)
            CPU_ABI2=$(adb_getprop ro.product.cpu.abi2)
            CPU_ABIS="$CPU_ABI,$CPU_ABI2"
        fi
        CPU_ABIS=$(echo $CPU_ABIS | tr ',' ' ')
        if echo $CPU_ABIS | tr ' ' '\n' | grep -q -x armeabi-v7a; then
            CPU_ABIS="$CPU_ABIS armeabi-v7a-hard"
        fi
        for C in $CPU_ABIS; do
            if [ "$C" != "$ABI" ]; then
                continue
            fi
            echo "$D"
        done
    done
    }
}

cleanup_devices()
{
    local ABI=$1
    adb_devices $ABI | {
        while read D; do
            $ADB -s "$D" shell "rm -r $DEVICE_PATH/$ABI 2>/dev/null"
        done
    }
}

trap "cleanup_devices" EXIT QUIT ABRT TERM
trap "echo 'INTERRUPTED'; exit 1" INT

run_tests()
{
    local SRCDIR="$1"
    shift
    local OPTIONS="$@"

    local CWD=$(pwd)

    log "## TESTS: Building and running tests in $CWD ..."
    LD_LIBRARY_PATH= DYLD_LIBRARY_PATH= $SRCDIR/b2 $OPTIONS 2>&1 | $STDBUF tee bjam.log | catlog
    log "## TESTS: Processing jam logs in $CWD ..."
    $SRCDIR/process_jam_log --v2 <bjam.log 2>&1 | catlog
    log "## TESTS: Generating library status in $CWD ..."
    $SRCDIR/library_status library_status.html links.html 2>&1 | catlog

    if [ $? -ne 0 -a "$KEEP_GOING" = "no" ]; then
        return 1
    fi
}

# $1: ABI
# $2: test directory
test_boost_for_abi ()
{
    local ABI=$1
    local TESTDIR="$2"

    dump "PREP Boost $BOOST_VERSION [$ABI]"

    cleanup_devices $ABI

    local APILEVEL=9
    if [ ${ABI%%64*} != ${ABI} ]; then
        APILEVEL=21
    fi

    local TCNAME
    case $ABI in
        armeabi*)
            TCNAME=arm-linux-androideabi
            ;;
        arm64*)
            TCNAME=aarch64-linux-android
            ;;
        mips)
            TCNAME=mipsel-linux-android
            ;;
        mips64)
            TCNAME=mips64el-linux-android
            ;;
        x86|x86_64)
            TCNAME=$ABI
            ;;
        *)
            echo "ERROR: Unknown ABI: $ABI" 1>&2
            exit 1
    esac

    local TCPREFIX
    case $ABI in
        x86)
            TCPREFIX=i686-linux-android
            ;;
        x86_64)
            TCPREFIX=x86_64-linux-android
            ;;
        *)
            TCPREFIX=$TCNAME
    esac

    local ARCH
    case $ABI in
        armeabi*)
            ARCH=arm
            ;;
        arm64*)
            ARCH=arm64
            ;;
        *)
            ARCH=$ABI
    esac

    local FLAGS LFLAGS
    case $ABI in
        armeabi)
            FLAGS="-march=armv5te -mtune=xscale -msoft-float"
            ;;
        armeabi-v7a)
            FLAGS="-march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=softfp"
            LFLAGS="-Wl,--fix-cortex-a8"
            ;;
        armeabi-v7a-hard)
            FLAGS="-march=armv7-a -mfpu=vfpv3-d16 -mhard-float"
            LFLAGS="-Wl,--fix-cortex-a8"
            LFLAGS="$LFLAGS -Wl,--no-warn-mismatch"
            ;;
        arm64-v8a)
            FLAGS=""
            ;;
        x86)
            FLAGS="-m32"
            ;;
        x86_64)
            FLAGS="-m64"
            ;;
        mips)
            FLAGS="-mabi=32 -mips32"
            ;;
        mips64)
            FLAGS="-mabi=64 -mips64r6"
            ;;
    esac

    local TCPATH=$NDK_DIR/toolchains/$TCNAME-$TOOLCHAIN_VERSION/prebuilt/$HOST_TAG

    rm -Rf $TESTDIR
    mkdir -p $TESTDIR
    fail_panic "Couldn't create temporary test directory $TESTDIR"

    local SRCDIR="$TESTDIR/src"
    copy_directory "$BOOST_SRCDIR" "$SRCDIR"

    local TMPHOSTTCDIR=$TESTDIR/host-bin
    run mkdir $TMPHOSTTCDIR
    fail_panic "Couldn't create temporary directory for host toolchain wrappers"

    for T in cc gcc g++; do
        mktool $TMPHOSTTCDIR/$T <<EOF
#!/bin/bash

PARAMS=""
for p in "\$@"; do
    case \$p in
        -Wl,*)
            if [ "$HOST_OS" = "linux" ]; then
                PARAMS="\$PARAMS \$p"
            fi
            ;;
        *)
            PARAMS="\$PARAMS \$p"
    esac
done

run()
{
    echo "## COMMAND: \$@" >>$TMPLOG
    exec "\$@"
}

LFLAGS=""
if [ "$HOST_OS" = "darwin" ]; then
    LFLAGS="\$LFLAGS -static-libgcc -static-libstdc++ -lstdc++"
else
    LFLAGS="\$LFLAGS -lstdc++"
fi

run $CC $HOST_CFLAGS $HOST_LDFLAGS \$PARAMS \$LFLAGS
EOF
    done

    PATH=$TMPHOSTTCDIR:$SAVED_PATH
    export PATH

    if [ ! -x $SRCDIR/b2 ]; then
        cd $SRCDIR
        fail_panic "Couldn't CD to temporary Boost $BOOST_VERSION sources directory"

        run ./bootstrap.sh --with-toolset=cc
        fail_panic "Could not bootstrap Boost build"
    fi

    {
        echo "import option ;"
        echo "import feature ;"
        echo "using gcc : $HOST_OS : $TMPHOSTTCDIR/g++ ;"
        echo "project : default-build <toolset>gcc ;"
        echo "libraries = ;"
        echo "option.set keep-going : false ;"
    } | cat >$SRCDIR/project-config.jam
    fail_panic "Could not create project-config.jam"

    for T in process_jam_log library_status; do
        test -x $SRCDIR/$T && continue

        cd $SRCDIR/tools/regression/build
        fail_panic "Could not CD to regression build directory"

        run $SRCDIR/b2 toolset=gcc-$HOST_OS $T
        fail_panic "Could not build $T"

        run cp $(find . -name $T -print) $SRCDIR/
        fail_panic "Could not copy $T to $SRCDIR"
    done

    {
        echo "import option ;"
        echo "import feature ;"
        echo "using gcc : $ARCH : g++ ;"
        echo "project : default-build <toolset>gcc ;"
        echo "libraries = ;"
        echo "option.set keep-going : false ;"
    } | cat >$SRCDIR/project-config.jam
    fail_panic "Could not create project-config.jam"

    local TMPTARGETTCDIR=$TESTDIR/target-bin
    run mkdir $TMPTARGETTCDIR
    fail_panic "Couldn't create temporary directory for target $ABI toolchain wrappers"

    local SYSROOT=$NDK_DIR/platforms/android-$APILEVEL/arch-$ARCH
    local LIBCRYSTAX=$NDK_DIR/$CRYSTAX_SUBDIR
    local GNULIBCXX=$NDK_DIR/sources/cxx-stl/gnu-libstdc++/$TOOLCHAIN_VERSION
    local ICU=$NDK_DIR/$ICU_SUBDIR/$ICU_VERSION
    local BOOST=$NDK_DIR/$BOOST_SUBDIR/$BOOST_VERSION

    FLAGS="$FLAGS --sysroot=$SYSROOT"

    FLAGS="$FLAGS -fPIC"
    if [ "$ENABLE_PIE" = "yes" ]; then
        FLAGS="$FLAGS -fPIE"
        LFLAGS="$LFLAGS -pie"
    fi

    local TOOL
    for TOOL in gcc g++ c++ cpp; do
        mktool $TMPTARGETTCDIR/$TOOL <<EOF
#!/bin/sh

if echo "\$@" | tr ' ' '\\n' | grep -q -x -e -c; then
    LINKER=no
else
    LINKER=yes
fi

# Remove any -m32/-m64 from input parameters
PARAMS=\`echo "\$@" | tr ' ' '\\n' | grep -v -x -e -m32 | grep -v -x -e -m64 | tr '\\n' ' '\`
if [ "x\$LINKER" = "xyes" ]; then
    # Fix SONAME for shared libraries
    NPARAMS=""
    SONAME_DETECTED=no
    for p in \$PARAMS; do
        if [ "x\$p" = "x-Wl,-soname" -o "x\$p" = "x-Wl,-h" ]; then
            SONAME_DETECTED=yes
        elif [ "x\$SONAME_DETECTED" = "xyes" ]; then
            p=\`echo \$p | sed 's!^\\(-Wl,lib[^\\.]*\\.so\\)\\..*\$!\\1!'\`
            SONAME_DETECTED=no
        fi
        NPARAMS="\$NPARAMS \$p"
    done
    PARAMS=\$NPARAMS
fi

LDLIBS=""
FLAGS="$FLAGS"
if [ "x\$LINKER" = "xyes" ]; then
    FLAGS="\$FLAGS $LFLAGS"
    FLAGS="\$FLAGS -L$ICU/libs/$ABI"
    FLAGS="\$FLAGS -L$LIBCRYSTAX/libs/$ABI"
    FLAGS="\$FLAGS -L$GNULIBCXX/libs/$ABI"
    LDLIBS="-lgnustl_shared"
else
    FLAGS="\$FLAGS -I$ICU/include"
    FLAGS="\$FLAGS -I$GNULIBCXX/include"
    FLAGS="\$FLAGS -I$GNULIBCXX/libs/$ABI/include"
    FLAGS="\$FLAGS -I$LIBCRYSTAX/include"
fi

run()
{
    echo "## COMMAND: \$@" >>$TMPLOG
    exec "\$@"
}

run $TCPATH/bin/$TCPREFIX-$TOOL \$FLAGS \$PARAMS \$LDLIBS
EOF
        fail_panic "Could not create target tool $TOOL"
    done

    for TOOL in as ar ranlib strip gcc-ar gcc-ranlib; do
        {
            echo "#!/bin/sh"
            echo 'run()'
            echo '{'
            echo '    echo "## COMMAND: $@" >>'$TMPLOG
            echo '    exec "$@"'
            echo '}'
            echo "run $TCPATH/bin/$TCPREFIX-$TOOL \"\$@\""
        } | mktool $TMPTARGETTCDIR/$TOOL
        fail_panic "Could not create target tool $TOOL"
    done

    PATH=$TMPTARGETTCDIR:$SAVED_PATH
    export PATH

    local DEVPATH=$DEVICE_PATH/$ABI

    local ADBRUNNER=$TMPTARGETTCDIR/adbrunner
    {
        echo '#!/bin/bash'
        echo ''
        echo 'LOG='$TMPLOG
        echo ''
        echo 'echo "## COMMAND: $0 $@" >>$LOG'
        echo ''
        echo 'F=$1'
        echo 'shift'
        echo 'ARGS="$@"'
        echo 'BF=$(basename $F)'
        echo 'DEVPATH='$DEVPATH
        echo 'DSTPATH=$DEVPATH/$(uuidgen)'
        echo 'ADB='$ADB
        echo 'STRIP='$TMPTARGETTCDIR/strip
        echo 'LOCKDIR='$LOCKDIR
        echo 'PREFIX="ADBRUNNER.$$"'
        echo ''
        echo 'EXTRAS=""'
        echo 'for DIR in $(echo $LD_LIBRARY_PATH $DYLD_LIBRARY_PATH | tr ":" "\\n"); do'
        echo '    for LIB in $(find $DIR -name "lib*.so*" -print 2>/dev/null); do'
        echo '        basename $LIB | grep -q "^libboost_" && continue'
        echo '        EXTRAS="$EXTRAS $LIB"'
        echo '    done'
        echo 'done'
        echo ''
        echo 'adb_shell()'
        echo '{'
        echo '    local CMD="$@"'
        echo '    local ADBCAP=$F.adbcap.$(uuidgen)'
        echo '    echo "## $PREFIX [$ANDROID_SERIAL] RUN: $CMD" >>$LOG'
        echo '    rm -f $ADBCAP'
        echo '    $ADB shell "$CMD ; echo \$?" 2>&1 \'
        echo '        | sed -e "s,[[:cntrl:]],,g" | '$STDBUF' tee $ADBCAP >>$LOG'
        echo '    RC=$(sed -e "\$!d" $ADBCAP 2>/dev/null)'
        echo '    sed -e "\$d" $ADBCAP'
        echo '    rm -f $ADBCAP'
        echo '    return $RC'
        echo '}'
        echo ''
        echo 'adb_push()'
        echo '{'
        echo '    local SRC="$1"'
        echo '    local DST="$2"'
        echo ''
        echo '    local CMD="$ADB push $SRC $DST"'
        echo '    echo "## $PREFIX [$ANDROID_SERIAL] PUSH: $CMD" >>$LOG'
        echo '    $CMD >>$LOG 2>&1'
        echo '    RC=$?'
        echo '    if [ $RC -ne 0 ]; then'
        echo '        echo "## $PREFIX [$ANDROID_SERIAL] PUSH FAILED: $SRC" >>$LOG'
        echo '        $ADB shell "rm -r $DSTPATH" >/dev/null 2>&1'
        echo '        return $RC'
        echo '    fi'
        echo ''
        echo '    return 0'
        echo '}'
        echo ''
        echo 'lock()'
        echo '{'
        echo '    local COUNT=0'
        echo '    while true; do'
        echo '        mkdir "$LOCKDIR/$@" >/dev/null 2>&1'
        echo '        test $? -eq 0 && break'
        echo '        COUNT=$(expr $COUNT + 1)'
        echo '        if [ $COUNT -gt 30 ]; then'
        echo '            echo "## $PREFIX [$@] LOCK: STILL BUSY" >>$LOG'
        echo '            COUNT=0'
        echo '        fi'
        echo '        sleep 1'
        echo '    done'
        echo '    echo "$$" >"$LOCKDIR/$@/owner" 2>/dev/null || true'
        echo '}'
        echo ''
        echo 'unlock()'
        echo '{'
        echo '    local UUID=$(uuidgen)'
        echo '    mv "$LOCKDIR/$@" "$LOCKDIR/$@.$UUID" >/dev/null 2>&1'
        echo '    rm -Rf "$LOCKDIR/$@.$UUID" >/dev/null 2>&1'
        echo '}'
        echo ''
        echo '{'
        echo '    cat <<EOD'
        adb_devices $ABI
        echo 'EOD'
        echo '} | {'
        echo 'while read D; do'
        echo '    lock "$D"'
        echo '    ('
        echo ''
        echo '    export ANDROID_SERIAL="$D"'
        echo ''
        echo '    $ADB shell "rm -r $DSTPATH" >/dev/null 2>&1'
        echo '    adb_shell "mkdir -p $DSTPATH"'
        echo ''
        echo '    for E in $F $EXTRAS; do'
        echo '        BE=$(basename $E | sed "s,\\.so\\..*\$,.so,")'
        echo '        cp -f $E $E.dbg'
        echo '        $STRIP --strip-unneeded $E >/dev/null 2>&1'
        echo '        adb_push "$E" "$DSTPATH/$BE" && adb_shell "chmod 0755 $DSTPATH/$BE"'
        echo '        if [ $? -ne 0 ]; then'
        echo '            echo "## $PREFIX [$ANDROID_SERIAL] SKIP: $F" >>$LOG'
        echo '            exit 0'
        echo '        fi'
        echo '    done'
        echo ''
        echo '    NEWARGS=""'
        echo '    for E in $ARGS; do'
        echo '        if [ -e $E ]; then'
        echo '            BE=$(basename $E)'
        echo '            adb_push "$E" "$DSTPATH/$BE"'
        echo '            if [ $? -ne 0 ]; then'
        echo '                echo "## $PREFIX [$ANDROID_SERIAL] SKIP: $F" >>$LOG'
        echo '                exit 0'
        echo '            fi'
        echo '            NEWARGS="$NEWARGS $DSTPATH/$BE"'
        echo '        else'
        echo '            NEWARGS="$NEWARGS $E"'
        echo '        fi'
        echo '    done'
        echo ''
        echo '    adb_shell "cd $DSTPATH && LD_LIBRARY_PATH=$DEVPATH/lib:$DSTPATH TMPDIR=$DEVPATH/tmp ./$BF $NEWARGS"'
        echo '    RC=$?'
        echo '    $ADB shell "rm -r $DSTPATH" >/dev/null 2>&1'
        echo '    if [ $RC -ne 0 ]; then'
        echo '        echo "## $PREFIX [$ANDROID_SERIAL] RUN FAILED [\$?=$RC]: $F" >>$LOG'
        echo '        exit $RC'
        echo '    fi'
        echo ''
        echo '    exit 0'
        echo ''
        echo '    )'
        echo ''
        echo '    RC=$?'
        echo '    unlock "$D"'
        echo '    test $RC -eq 0 || exit $RC'
        echo 'done'
        echo ''
        echo 'exit 0'
        echo '}'
    } | mktool $ADBRUNNER

    adb_devices $ABI | {
        local TMPTARGETLIBDIR=$TESTDIR/target-lib
        run mkdir $TMPTARGETLIBDIR
        fail_panic "Cannot create temporary $ABI target libraries directory"

        while read D; do
            run $ADB -s "$D" shell "rm -r $DEVPATH 2>/dev/null"
            run $ADB -s "$D" shell "mkdir -p $DEVPATH/tmp"
            run $ADB -s "$D" shell "mkdir -p $DEVPATH/lib"
            for F in \
                $LIBCRYSTAX/libs/$ABI/libcrystax.so \
                $GNULIBCXX/libs/$ABI/libgnustl_shared.so \
                $BOOST/libs/$ABI/lib*.so \
                $ICU/libs/$ABI/lib*.so \
                ; do
                run cp -f $F $TMPTARGETLIBDIR/
                fail_panic "Cannot copy $F to $TMPTARGETLIBDIR"
            done
            for F in $TMPTARGETLIBDIR/lib*.so; do
                run $TMPTARGETTCDIR/strip --strip-unneeded $F
                fail_panic "Cannot strip $F"
                run $ADB -s "$D" push $F $DEVPATH/lib/
                fail_panic "Cannot push $F to $D"
            done
        done
    }

    local TESTLIBS=$(echo $TESTS | tr ',' ' ')
    if [ -z "$TESTLIBS" -o "$TESTLIBS" = "all" ]; then
        TESTLIBS=$(find $SRCDIR/libs -mindepth 1 -maxdepth 1 -type d -exec basename '{}' \; | sort)
    fi

    local BJAM_OPTIONS="\
        --dump-tests \
        -j$NUM_JOBS \
        variant=release \
        link=static,shared \
        runtime-link=shared \
        threading=multi \
        threadapi=pthread \
        target-os=android \
        toolset=gcc-$ARCH \
        testing.launcher=$ADBRUNNER \
        "

    if [ "$KEEP_GOING" = "no" ]; then
        BJAM_OPTIONS="$BJAM_OPTIONS -q"
    fi

    local STATUS=$SRCDIR/status.html

    cat >$STATUS <<EOF
<!doctype HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link rel="stylesheet" type="text/css" href="boost.css">
<title>Boost $BOOST_VERSION [$ABI] testing results</title>
<style media="screen" type="text/css">
html, body {
    width: 100%;
    height: 100%;
}
iframe {
    border: solid 1px #ddd;
    width: 95vw;
    height: 80vh;
    margin-top: 5px;
}
</style>
<script type="text/javascript">
function toggle(id)
{
    var e = document.getElementById(id);

    if (e.style.display == '')
        e.style.display = 'none';
    else
        e.style.display = '';
}
</script>
<body>
<h1>Boost $BOOST_VERSION [$ABI] testing results</h1>
<ul>
EOF

    local LIBNAME SUBLIB
    for LIBNAME in $TESTLIBS; do
        run cd $SRCDIR/libs/$LIBNAME
        fail_panic "Could not CD to $LIBNAME directory: $SRCDIR/libs/$LIBNAME"

        if [ -e test/Jamfile.v2 ]; then
            cd test
            fail_panic "Could not CD to test subdirectory"

            dump "TEST Boost $BOOST_VERSION [$ABI]: $LIBNAME"

            {
                local ID=$LIBNAME
                local HREF="libs/$LIBNAME/test/library_status.html"
                echo "<li>"
                echo "<a href=\"$HREF\" onclick=\"toggle('$ID'); return false;\">$LIBNAME</a><br/>"
                echo "<iframe id=\"$ID\" src=\"$HREF\" style=\"display: none\"></iframe>"
                echo "</li>"
            } | cat >>$STATUS

            run_tests $SRCDIR $BJAM_OPTIONS
            test $? -eq 0 || break
        fi

        local SUBLIB_FAILED=
        for SUBLIB in $(find $SRCDIR/libs/$LIBNAME -mindepth 1 -maxdepth 1 -type d -exec basename '{}' \; | sort); do
            run cd $SRCDIR/libs/$LIBNAME/$SUBLIB
            fail_panic "Could not CD to sub-library directory: $SRCDIR/libs/$LIBNAME/$SUBLIB"

            if [ -e test/Jamfile.v2 ]; then
                cd test
                fail_panic "Could not CD to test subdirectory"

                dump "TEST Boost $BOOST_VERSION [$ABI]: $LIBNAME/$SUBLIB"

                {
                    local ID="${LIBNAME}_${SUBLIB}"
                    local HREF="libs/$LIBNAME/$SUBLIB/test/library_status.html"
                    echo "<li>"
                    echo "<a href=\"$HREF\" onclick=\"toggle('$ID'); return false;\">$LIBNAME/$SUBLIB</a><br/>"
                    echo "<iframe id=\"$ID\" src=\"$HREF\" style=\"display: none\"></iframe>"
                    echo "</li>"
                } | cat >>$STATUS

                run_tests $SRCDIR $BJAM_OPTIONS
                if [ $? -ne 0 ]; then
                    SUBLIB_FAILED=yes
                    break
                fi
            fi
        done

        test "$SUBLIB_FAILED" = "yes" && break
    done

    cat >>$STATUS <<EOF
</ul>
</body>
</html>
EOF

    cleanup_devices $ABI

    local RESULTS=$RESULTS_PATH/$ABI

    rm -Rf $RESULTS
    run mkdir -p $RESULTS
    fail_panic "Could not create results directory"

    {
        echo $STATUS
        echo $SRCDIR/boost.css
        find $SRCDIR/libs -name library_status.html -print
        find $SRCDIR/libs -name links.html -print
    } | sed "s,$SRCDIR/,," | {
        while read F; do
            DIR=$RESULTS/$(dirname $F)
            mkdir -p $DIR
            fail_panic "Could not create results directory for $F"

            cp -f $SRCDIR/$F $DIR/
            fail_panic "Could not copy results"
        done
    }

    dump "STAT Boost $BOOST_VERSION [$ABI]: $RESULTS/$(basename $STATUS)"
}

SAVED_PATH=$PATH

for ABI in $ABIS; do
    NUM_DEVICES=$(adb_devices $ABI | wc -l)
    if [ $NUM_DEVICES -eq 0 ]; then
        dump "SKIP Boost $BOOST_VERSION [$ABI]: no compatible devices found"
        continue
    fi

    log "Found $NUM_DEVICES $ABI-compatible devices"

    test_boost_for_abi $ABI "$TEST_DIR/$ABI"
done

# Restore PATH
PATH=$SAVED_PATH
export PATH

if [ -z "$OPTION_TEST_DIR" ]; then
    log "Cleaning up..."
    rm -rf $TEST_DIR
else
    log "Don't forget to cleanup: $TEST_DIR"
fi

log "Done!"
