#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'
require 'timeout'
require 'securerandom'
require 'open3'
require 'json'
require 'pathname'

Encoding.default_external = Encoding::UTF_8
ENV['LANG'] = 'en_US.UTF-8'
ENV['LC_ALL'] = ENV['LANG']

WINDOWS = RUBY_PLATFORM =~ /(cygwin|mingw|win32)/ ? true : false

USE_SELECT_BASED_IO = true

STARTED_AT = Time.now

MYPID = Process.pid
CHILDREN = []

ROOTDIR = File.join(ENV['HOME'], '.crystax', 'adbrunner')

STDOUT_PREFIX = "   > "
STDERR_PREFIX = "   * "

OPTIONS = {}
OPTIONS[:devpath] = '/data/local/tmp/adbrunner'
OPTIONS[:lockdir] = File.join(ROOTDIR, 'lock')
OPTIONS[:libdir]  = File.join(ROOTDIR, 'lib')
OPTIONS[:pie] = true
OPTIONS[:device_lock_timeout] = 1
OPTIONS[:print_timestamps] = true

optparser = OptionParser.new do |o|
    o.banner = "Usage: #{$0} [options] executable [exe-options]"

    o.on("-h", "--help", "Show help screen and exit") do
        puts o
        exit 0
    end

    o.on("-v", "--[no-]verbose", "Enable verbose logging") do |v|
        OPTIONS[:verbose] = v
    end

    o.on("-l", "--log=FILE", "Use specified file for logging [stdout]") do |f|
        OPTIONS[:log] = f
    end

    o.on("-k", "--[no-]keep-going", "If specified, don't exit on first fail. ",
         "Instead, run remaining executables and fail when all of them are finished") do |k|
        OPTIONS[:keepgoing] = k
    end

    o.on("--[no-]print-timestamps", "Print timestamps in log [#{OPTIONS[:print_timestamps]}]") do |p|
        OPTIONS[:print_timestamps] = p
    end

    o.on("--abi=ABI", "Target ABI") do |a|
        OPTIONS[:abi] = a
    end

    o.on("--timeout=TIMEOUT", Integer, "Timeout (in seconds) for execution") do |t|
        OPTIONS[:timeout] = [t, 0].max
    end

    o.on("--adb=PATH", "Path to adb [autodetect]") do |a|
        OPTIONS[:adb] = a
    end

    o.on("--strip=PATH", "Full path to the 'strip' utility needed for stripping binaries before uploading them to device/emulator") do |s|
        OPTIONS[:strip] = s
    end

    o.on("--ndk=PATH", "Path to NDK [autodetect]") do |p|
        OPTIONS[:ndk] = p
    end

    o.on("--device-path=PATH", "Root path on device used for uploading binaries to [#{OPTIONS[:devpath]}]") do |d|
        OPTIONS[:devpath] = d
    end

    o.on("--[no-]pie", "Indicate that executable was built with (or without) -fPIE option") do |p|
        OPTIONS[:pie] = p
    end

    o.on("--lib-directory=PATH", "Directory to save temporary libraries before push them on device [#{OPTIONS[:libdir]}]") do |d|
        OPTIONS[:libdir] = d
    end

    o.on("--lock-directory=PATH", "Directory used for lock files [#{OPTIONS[:lockdir]}]") do |d|
        OPTIONS[:lockdir] = d
    end

    o.on("--device-lock-timeout=TIMEOUT", Numeric, "Timeout (in seconds) for device lock") do |t|
        OPTIONS[:device_lock_timeout] = t
    end

    o.on("--emulator-tag=TAG", "Run tests only on emulators having specified tag") do |tag|
        OPTIONS[:emutag] = tag
    end

    o.on("--run-on-all-devices", "If specified, run on all compatible devices") do |r|
        OPTIONS[:run_on_all_devices] = r
    end

    o.on("--mro-prefix=PREFIX", "Enabled machine-readable output prefixed with PREFIX") do |p|
        OPTIONS[:mroprefix] = p
    end

    o.on("--symbols-directories=LIST", Array, "Directories where unstripped binaries lays") do |l|
        OPTIONS[:symdirs] = l.map { |p| File.expand_path(p) }
    end

    o.on("--args-path-prefixes=LIST", Array, "Prefixes for command line arguments indicating paths") do |l|
        OPTIONS[:args_path_prefixes] = l
    end
end
ENV['POSIXLY_CORRECT'] = '1'
optparser.parse!(ARGV)

if OPTIONS[:abi].nil?
    $stderr.puts "ERROR: No ABI specified"
    $stderr.puts optparser
    exit 1
end

if OPTIONS[:devpath].nil?
    $stderr.puts "ERROR: No device path specified"
    $stderr.puts optparser
    exit 1
end

cmds = []

OPTIONS[:runfrom] = ARGV.shift.sub(/^@/, '') if ARGV.first.to_s =~ /^@/

if !OPTIONS[:runfrom].nil?
    File.open(OPTIONS[:runfrom], 'r') do |f|
        while line = f.gets.chomp.strip rescue nil
            next if line.empty?
            cmds << line.split(/\s+/)
        end
    end
else
    cmds << ARGV.dup unless ARGV.empty?
    ARGV.clear
end

if cmds.empty?
    $stderr.puts "ERROR: No executable specified"
    $stderr.puts optparser
    exit 1
end

if !ARGV.empty?
    $stderr.puts "ERROR: Extra arguments in command line"
    $stderr.puts optparser
    exit 1
end

CMDS = cmds

OPTIONS[:adb] = "adb" unless OPTIONS[:adb]
OPTIONS[:ndk] = File.dirname(File.dirname(__FILE__)) unless OPTIONS[:ndk]

VERBOSE = OPTIONS[:verbose]
ABI = OPTIONS[:abi]
ADB = OPTIONS[:adb]
NDK = OPTIONS[:ndk]
LOG = OPTIONS[:log]
PIE = OPTIONS[:pie]
TIMEOUT = OPTIONS[:timeout]
LOCKDIR = OPTIONS[:lockdir]
LIBDIR  = OPTIONS[:libdir]
DEVPATH = OPTIONS[:devpath]
EMUTAG  = OPTIONS[:emutag]
STRIP = OPTIONS[:strip]
DEVICE_LOCK_TIMEOUT = OPTIONS[:device_lock_timeout]
PRINT_TIMESTAMPS = OPTIONS[:print_timestamps]
RUN_ON_ALL_DEVICES = OPTIONS[:run_on_all_devices]
KEEPGOING = OPTIONS[:keepgoing]
MROPREFIX = OPTIONS[:mroprefix]
SYMDIRS = OPTIONS[:symdirs]
ARGS_PATH_PREFIXES = OPTIONS[:args_path_prefixes]

$stdout.sync = true
$stderr.sync = true

class AdbError < Exception
    def initialize(operation, msg)
        @operation = operation
        @msg = msg
    end

    def operation
        @operation
    end

    def message
        "ADB FAILED (#{@operation}): #{@msg}"
    end
end

class AdbShellCommandFailed < Exception
    def initialize(cmd, rc)
        @cmd = cmd
        @rc = rc
    end

    def exitcode
        @rc
    end

    def message
        "RUN [$?=#{@rc}]: #{@cmd}"
    end
end

class MRO
    def self.dump(object)
        return if MROPREFIX.nil? || MROPREFIX.empty?
        $stdout.puts "%s%s" % [MROPREFIX, object.to_json.to_s]
    end
end

def log(msg, options = {})
    do_log = proc do |f|
        prefix = "## ADBRUNNER.#{MYPID} "
        prefix << Time.now.utc.strftime('%Y-%m-%d %H:%M:%S.%3N UTC ') if PRINT_TIMESTAMPS
        prefix << "[%s] " % ENV['ANDROID_SERIAL'] if ENV['ANDROID_SERIAL']
        f.puts "#{prefix}#{msg}"
    end
    if LOG
        File.open(LOG, "a") { |f| do_log.call(f) }
    else
        do_log.call($stdout)
    end
end

def killall
    CHILDREN.each do |child|
        Process.kill('KILL', WINDOWS ? child : -Process.getpgid(child)) rescue nil
    end
end

def run(*args, &block)
    options = args.last.is_a?(Hash) ? args.pop : {}
    cmd = args.join(' ')
    log "## COMMAND: #{cmd}" if options[:verbose]

    pid = nil
    status = nil

    th = Thread.start do
        po = {}
        po[:pgroup] = true unless WINDOWS
        Open3.popen3(*args, po) do |i,o,e,t|
            pid = t.pid
            CHILDREN << pid

            [i,o,e].each { |io| io.sync = true }

            if block_given?
                yield i,o,e,t
            else
                i.close

                {o => STDOUT_PREFIX, e => STDERR_PREFIX}.map do |io,prefix|
                    Thread.start do
                        while line = io.gets.chomp rescue nil
                            log "#{prefix}#{line}"
                        end
                    end
                end.each(&:join)

                raise "'#{cmd}' failed: #{t.value.to_i}" if !t.value.success?
            end
            status = t.value
        end
    end

    begin
        Timeout.timeout(options[:timeout]) { th.join }
    rescue Timeout::Error => err
        log "WARNING: '#{cmd}' timed out (#{options[:timeout]} seconds)"
        ['TERM', 'KILL'].each do |sig|
            Process.kill(sig, WINDOWS ? pid : -Process.getpgid(pid)) rescue nil unless pid.nil?
        end
        th.kill
        raise err
    end

    status
ensure
    Process.kill('KILL', WINDOWS ? pid : -Process.getpgid(pid)) rescue nil unless pid.nil?
    CHILDREN.reject! { |c| c == pid } unless pid.nil?
end

def strip(src, dst = nil)
    return src if !STRIP && dst.nil?

    dst = "/tmp/adbrunner-#{File.basename(src)}.stripped.#{SecureRandom.uuid}" if dst.nil?
    at_exit { FileUtils.rm_f dst } if dst.nil?

    log "COPY: #{src} -> #{dst}"
    FileUtils.rm_f dst
    FileUtils.mkdir_p File.dirname(dst)
    FileUtils.cp src, dst

    if STRIP
        log "STRIP: #{dst}"
        run STRIP, '--strip-unneeded', dst
    end

    dst
end

def adb_devices
    devices = []

    err = ""
    run ADB, 'devices', timeout: 5 do |i,o,e,t|
        if USE_SELECT_BASED_IO
            i.close

            out = ""
            while true
                rs = []
                rs << o unless o.eof?
                rs << e unless e.eof?
                break if rs.empty?

                ios, = IO.select(rs)
                ios.each do |io|
                    c = io.read_nonblock(4096) rescue nil
                    next if c.nil?

                    case io
                    when e
                        err << c
                    when o
                        out << c
                    end
                end
            end

            out.split("\n").map(&:chomp).each do |line|
                next unless line =~ /^([^\t]+)\tdevice$/
                devices << $1
            end
        else
            ot = Thread.start do
                while line = o.gets.chomp rescue nil
                    next unless line =~ /^([^\t]+)\tdevice$/
                    devices << $1
                end
            end

            et = Thread.start do
                while line = e.gets
                    err << "#{line}\n"
                end
            end

            i.close
            ot.join
            et.join
        end

        raise AdbError.new('devices', err) unless t.value.success?
    end

    fd = []
    devices.each do |id|
        begin
            next if !EMUTAG.nil? && adb_getprop(id, 'crystax.emulator.tag') != EMUTAG
            next if adb_getprop(id, 'sys.boot_completed') != "1"

            apilevel = adb_getprop(id, 'ro.build.version.sdk').to_i
            next if apilevel == 0
            next if apilevel <= 15 && PIE
            next if apilevel >= 21 && !PIE

            devabilist = []
            devabilist += adb_getprop(id, 'ro.product.cpu.abilist').split(',')
            if devabilist.empty?
                devabi1 = adb_getprop(id, 'ro.product.cpu.abi')
                devabi2 = adb_getprop(id, 'ro.product.cpu.abi2')
                devabilist << devabi1 unless devabi1.empty?
                devabilist << devabi2 unless devabi2.empty?
            end
            devabilist << "armeabi" if devabilist.empty?
            devabilist << "armeabi-v7a-hard" if devabilist.include?("armeabi-v7a")

            if id =~ /^emulator\b/
                devmodel = id
            else
                devmodel = adb_getprop(id, 'ro.product.model') rescue id
            end

            devmainabi = devabilist.first
            devabilist.each do |devabi|
                # Skip incompatible ABI
                next if devabi != ABI

                # Special case: Dell Venue x86 tablet specify 'ro.product.cpu.abi=x86' and 'ro.product.cpu.abi2=armeabi-v7a'.
                # However, only non-PIE-enabled armeabi-v7a binaries supported, even though for x86 binaries usual
                # rules applied - i.e. PIE binaries works starting from android-16 and non-PIE binaries works only up to android-19.
                next if PIE && devabi =~ /^armeabi-v7a/ && devmainabi == 'x86'

                fd << {id: id, model: devmodel, apilevel: apilevel}
            end
        rescue AdbError => e
            log e.message
            next
        end
    end

    fd
rescue Timeout::Error
    log "WARNING: 'adb devices' timed out"
    []
rescue AdbError => e
    log e.message
    []
end

def adb_getprop(devid, propname)
    tag = "EXITCODE#{SecureRandom.uuid.gsub('-', '')}"

    os = []
    es = []
    run ADB, '-s', devid, 'shell', "getprop #{propname} ; echo #{tag}:$?", timeout: 5, verbose: VERBOSE do |i,o,e,t|
        i.close

        if USE_SELECT_BASED_IO
            out = ""
            err = ""
            while true
                rs = []
                rs << o unless o.eof?
                rs << e unless e.eof?
                break if rs.empty?

                ios, = IO.select(rs)
                ios.each do |io|
                    c = io.read_nonblock(4096) rescue nil
                    next if c.nil?

                    case io
                    when e
                        err << c
                    when o
                        out << c
                    end
                end
            end

            os = out.split("\n").map(&:chomp).map { |line| line.chop! while line[-1] == "\r"; line }
            es = err.split("\n").map(&:chomp).map { |line| line.chop! while line[-1] == "\r"; line }
        else
            {o => os, e => es}.map do |io,sink|
                Thread.start do
                    while line = io.gets.chomp rescue nil
                        line.chop! while line[-1] == "\r"
                        sink << line
                    end
                end
            end.each(&:join)
        end

        raise AdbError.new("getprop #{propname}", es.join("\n")) unless t.value.success?
    end

    last = os.last
    raise AdbError.new("getprop #{propname}", "no tag in stdout: #{os.inspect}") unless last =~ /#{tag}:(\d+)$/
    raise AdbError.new("getprop #{propname}", "exit code: #{$1}") unless $1.to_i == 0

    last.sub!(/#{tag}:.*$/, '')
    os = os[0..-2]
    os << last unless last.empty?

    out = os.join("\n")
    log "[#{devid}] #{propname}: #{out.inspect}" if VERBOSE
    out
rescue Timeout::Error
    raise AdbError.new("getprop #{propname}", "timeout")
end

def adb_rm(devid, files)
    run ADB, '-s', devid, 'shell', "rm -r #{files}", timeout: 10, verbose: VERBOSE do |i,o,e,t|
        i.close

        if USE_SELECT_BASED_IO
            while true
                rs = []
                rs << o unless o.eof?
                rs << e unless e.eof?
                break if rs.empty?

                ios, = IO.select(rs)
                ios.each do |io|
                    io.read_nonblock(4096) rescue nil
                end
            end
        else
            [o,e].map do |io|
                Thread.start do
                    while io.getc
                        # Nothing
                    end
                end
            end.each(&:join)
        end

        t.value
    end
rescue Timeout::Error
    nil
end

def adb_shell(devid, cmd, options = {})
    log "RUN:  #{cmd}"

    tag = "EXITCODE#{SecureRandom.uuid.gsub('-', '')}"

    os = []
    es = []
    run ADB, '-s', devid, 'shell', "#{cmd} ; echo #{tag}:$?" do |i,o,e,t|
        ot = Thread.start do
            have_tag = false
            while line = o.gets.chomp rescue nil
                next if have_tag

                line.chop! while line[-1] == "\r"
                os << line

                logline = line.dup
                if logline =~ /#{tag}:.*$/
                    have_tag = true
                    logline.sub!(/#{tag}:.*$/, '')
                    log "#{STDOUT_PREFIX}#{logline}" unless logline.empty?
                    $stdout.puts logline if !LOG.nil? && !logline.empty?
                else
                    log "#{STDOUT_PREFIX}#{logline}"
                    $stdout.puts logline if !LOG.nil?
                end
            end
        end

        et = Thread.start do
            while line = e.gets.chomp rescue nil
                line.chop! while line[-1] == "\r"
                log "#{STDERR_PREFIX}#{line}"
                es << line
            end
        end

        i.close
        ot.join
        et.join

        raise AdbError.new('shell', es.join("\n")) unless t.value.success?
    end

    raise AdbError.new('shell', os.join("\n")) if os.first =~ /Text file busy/
    raise AdbError.new('shell', "no tag in stdout: #{os.inspect}") if os.last !~ /#{tag}:(\d+)$/
    rc = $1.to_i
    raise AdbShellCommandFailed.new(cmd, rc) if rc != 0 && !options[:nothrow]
    rc
end

def adb_push(devid, src, dst)
    raise "No such file or directory: #{src}" unless File.exists?(src)

    if File.directory?(src) && adb_shell(devid, "mkdir -p #{dst}", nothrow: true) != 0
        raise AdbError.new('push', "Can't create #{dst}")
    end

    log "PUSH: #{src} -> #{dst}"

    run ADB, '-s', devid, 'push', src, dst do |i,o,e,t|
        i.close

        lt = Time.now

        wt = Thread.start do
            while true
                sleep 5
                next if Time.now - lt < 60
                log "WARNING: push '#{src} -> '#{dst}' timed out (60 seconds)"
            end
        end

        [o,e].map do |io|
            Thread.start do
                while line = io.gets
                    lt = Time.now
                    log line
                end
            end
        end.each(&:join)

        wt.kill

        raise AdbError.new('push', "Can't push #{src} to #{dst}") unless t.value.success?
    end
rescue Timeout::Error
    raise AdbError.new('push', "Push of #{src} to #{dst} timed out")
end

def adb_logcat(devid, tag, file)
    tagfound = false
    File.open(file, "w") do |f|
        run ADB, '-s', devid, 'logcat', '-v', 'threadtime', '-d', timeout: 30 do |i,o,e,t|
            ot = Thread.start do
                while line = o.gets
                    if line.chomp =~ /\b#{tag}\b/
                        tagfound = true
                        next
                    end
                    next unless tagfound

                    f.puts line
                end
            end

            et = Thread.start do
                while line = e.gets
                    next unless tagfound
                    f.puts line
                end
            end

            i.close
            ot.join
            et.join

            raise AdbError.new('logcat', "Can't get logcat") unless t.value.success?
        end
    end
rescue Timeout::Error
    nil
end

def do_run_test(attempt, devid, tag, exe, args)
    devpath = File.join(DEVPATH, ABI)
    dstpath = File.join(devpath, SecureRandom.uuid)
    dstbinpath  = File.join(dstpath, 'bin')
    dstdatapath = File.join(dstpath, 'data')

    dstdirs = []
    dstdirs << "#{devpath}/tmp"
    dstdirs << dstpath
    dstdirs << dstbinpath
    dstdirs << dstdatapath

    adb_shell devid, dstdirs.map { |e| "mkdir -p #{e}" }.join(" && ")

    binaries = [exe]

    File.open("#{exe}.ldlp", "r") do |tf|
        while dir = tf.gets.chomp rescue nil
            next if dir.empty?
            Dir.glob(File.join(dir, 'lib*.so*')).each do |lib|
                binaries << lib
            end
        end
    end if File.exists?("#{exe}.ldlp")

    ['LD_LIBRARY_PATH', 'DYLD_LIBRARY_PATH'].each do |e|
        ENV[e].split(':').each do |dir|
            Dir.glob(File.join(dir, 'lib*.so*')).each do |lib|
                binaries << lib
            end
        end if ENV[e]
    end

    binaries.reject! { |b| b =~ /\.ldlp$/ }

    binaries.each do |e|
        raise "No such file or directory: #{e}" unless File.exists?(e)

        be = File.basename(e)

        tmpf = strip(e)
        begin
            adb_push devid, tmpf, "#{dstbinpath}/#{be}"
            adb_shell devid, "chmod 0755 #{dstbinpath}/#{be}"
        ensure
            FileUtils.rm_f tmpf if tmpf != e
        end
    end

    pushed = {}

    newargs = []
    args.each do |arg|
        prefix = ARGS_PATH_PREFIXES.select { |p| arg =~ /^(-#{p}|--#{p}=)/ }.first rescue nil
        arg = arg.sub(/^(-#{prefix}|--#{prefix}=)/, '') unless prefix.nil?

        if File.exists?(arg)
            dstarg = File.join(dstdatapath, File.basename(arg))
            adb_push devid, arg, dstarg if pushed[arg] != dstarg
            pushed[arg] = dstarg
        else
            dstarg = arg
        end
        newarg = "#{prefix}#{dstarg}"
        newargs << newarg
    end

    env = {}
    env['LD_LIBRARY_PATH'] = dstbinpath
    env['TMPDIR'] = "#{devpath}/tmp"

    adb_shell devid, "log #{tag} && cd #{dstbinpath} && #{env.map { |k,v| "#{k}=#{v}" }.join(' ')} ./#{File.basename(exe)} #{newargs.join(' ')}"
rescue AdbShellCommandFailed => err
    log err.message

    logerr = proc do |msg|
        log "#{STDERR_PREFIX}#{msg}"
        $stderr.puts msg unless LOG.nil?
    end

    logerr.call ""
    logerr.call ""
    logerr.call "=== BEGIN OF LAUNCHER PARAMETERS ==="
    logerr.call "ARGV: #{exe} #{args.join(' ')}"
    logerr.call "PWD: #{dstbinpath}"
    logerr.call "=== END OF LAUNCHER PARAMETERS ==="

    lf = "/tmp/adbrunner-logcat-#{SecureRandom.uuid}.log"
    at_exit { FileUtils.rm_f lf }

    adb_logcat devid, tag, lf

    File.open(lf, "r") do |f|
        logerr.call ""
        logerr.call "=== BEGIN OF LOGCAT ==="
        while line = f.gets
            logerr.call line
        end
        logerr.call "=== END OF LOGCAT ==="
    end rescue nil

    # Prepare temporary directory where all unstripped binaries would be accumulated
    symdirs = SYMDIRS || [File.dirname(exe)]
    if symdirs.size > 1
        symdir = "/tmp/symbols-#{File.basename(exe)}-#{SecureRandom.uuid}"
        at_exit { FileUtils.rm_rf symdir }

        FileUtils.rm_rf symdir
        FileUtils.mkdir_p symdir
        symdirs.each do |dir|
            Dir.glob(File.join(dir, '*')).select { |e| File.file?(e) }.each do |src|
                next if src =~ /\.a$/

                relpath = Pathname.new(src).relative_path_from(Pathname.new(dir)).to_s
                dst = File.join(symdir, relpath)

                next if File.exists?(dst)

                FileUtils.mkdir_p File.dirname(dst)
                FileUtils.cp src, dst
            end
        end
    else
        symdir = symdirs.first
    end

    run File.join(NDK, 'ndk-stack'), '-sym', symdir, '-dump', lf, timeout: 30 do |i,o,e,t|
        logerr.call ""
        logerr.call "=== BEGIN OF NDK-STACK ==="

        i.close

        [o,e].map do |io|
            Thread.start do
                while line = io.gets rescue nil
                    logerr.call line
                end
            end
        end.each(&:join)

        Process.kill(9, t.pid) rescue nil

        logerr.call "=== END OF NDK-STACK ==="
    end rescue nil

    FileUtils.rm_rf symdir if symdirs.size > 1
    FileUtils.rm_f lf

    err.exitcode
ensure
    adb_rm devid, dstpath
end

def run_test(attempt, devid, exe, args)
    ENV['ANDROID_SERIAL'] = devid

    FileUtils.mkdir_p LOCKDIR
    File.open(File.join(LOCKDIR, "#{devid}.lock"), "w") do |f|
        begin
            log "LOCK  (attempt ##{attempt}): #{args.dup.unshift(exe).join(' ')}"
            Timeout.timeout(DEVICE_LOCK_TIMEOUT) { f.flock(File::LOCK_EX) }
        rescue Timeout::Error => e
            log "LOCK  (attempt ##{attempt}): BUSY"
            raise e
        end

        log "START (attempt ##{attempt}): #{args.dup.unshift(exe).join(" ")}"

        tag = "LOGCAT-TAG-#{SecureRandom.uuid.gsub('-', '')}"
        rc = do_run_test(attempt, devid, tag, exe, args)

        log "EXIT: #{rc} (took #{time_range(Time.now - STARTED_AT)})"
        rc
    end
end

def time_range(v)
    seconds = v % 60
    minutes = (v % 3600) / 60
    hours   = v / 3600
    "%d:%02d:%02d" % [hours, minutes, seconds]
end

begin
    tmh = Thread.start do
        now = Time.now
        sleep [TIMEOUT - (now - STARTED_AT), 0].max

        MRO.dump event: "timeout", timeout: TIMEOUT

        message = "TIMEOUT (#{time_range(TIMEOUT)} from start)"
        log message
        $stderr.puts message

        killall
        exit 1
    end if TIMEOUT

    fails = 0

    # Get list of devices
    devices = adb_devices

    cmdnum = 0
    CMDS.each do |cmd|
        cmdnum += 1

        log "EXEC: #{cmd.join(' ')}"

        exe = cmd.shift
        args = cmd

        mrofields = {number: cmdnum, total: CMDS.size, exe: exe, args: args}

        paused = false

        attempt = 0
        while true
            attempt += 1

            rc = nil
            devices.sort { |a,b| a[:apilevel] <=> b[:apilevel] }.each do |d|
                begin
                    rc = nil
                    paused = false if paused

                    id = d[:id]
                    devmodel = d[:model]
                    apilevel = d[:apilevel]

                    MRO.dump mrofields.merge({event: "run", attempt: attempt, devmodel: devmodel, apilevel: apilevel})

                    rc = run_test(attempt, id, exe, args)
                    if rc != 0
                        MRO.dump mrofields.merge({event: "fail", exitcode: rc})
                        if KEEPGOING
                            fails += 1
                        else
                            exit rc
                        end
                    end

                    break if rc != 0 || !RUN_ON_ALL_DEVICES
                rescue Timeout::Error
                    # Ignore. Just switch to next device
                rescue AdbError => e
                    log e.message
                    # Refresh list of devices
                    devices = adb_devices
                end
            end

            # Switch to next CMD if current one was executed and exited with any exit code
            break if !rc.nil?

            if EMUTAG.nil?
                MRO.dump mrofields.merge({event: "skip", reason: "no compatible device/emulator"})
                log "EXIT: no suitable device/emulator"
                break
            end

            if !paused
                MRO.dump mrofields.merge({event: "pause"})
                paused = true
            end

            log "WAIT: no suitable device/emulator (#{time_range(Time.now - STARTED_AT)} elapsed); will try bit later"
            sleep 10

            # Refresh list of devices
            devices = adb_devices
        end
    end

    exit fails
rescue Interrupt
    $stderr.puts "\n\nINTERRUPTED"
    exit 1
rescue RuntimeError => e
    $stderr.puts "FATAL: #{e.message}"
    $stderr.puts e.backtrace.join("\n")
    exit 1
ensure
    tmh.kill rescue nil
end
