#!/usr/bin/env bash

error()
{
    echo "*** ERROR: $@" 1>&2
}

HOST_OS=$(uname -s | tr '[A-Z]' '[a-z]')
case $HOST_OS in
    linux|darwin)
        ;;
    *)
        error "Host OS '$HOST_OS' is not supported"
        exit 1
esac

HOST_ARCH=$(uname -m)
case $HOST_ARCH in
    x86_64)
        ;;
    *)
        error "Host CPU architecture '$HOST_ARCH' is not supported"
        exit 1
esac

SED=
for sed in gsed sed; do
    $sed --version 2>/dev/null | head -n 1 | grep -q GNU || continue
    SED=$sed
    break
done
if [ -z "$SED" ]; then
    error "No GNU sed found!"
    exit 1
fi

NDK=$(cd $(dirname $0)/.. && pwd)
DEPLOY_ROOT=/data/local/tmp/posix
SSHD_PORT=10022
ANDROID_SERIAL=

usage()
{
    echo "Usage: $0 [options]"
    echo ""
    echo "Optional parameters:"
    echo ""
    echo "  -h,--help                  Show this screen and exit"
    echo ""
    echo "  -s,--device-id=ID          Device ID to deploy to [autodetect]"
    echo "  -r,--root=PATH             Deploy to this root folder on device"
    echo "                             [$DEPLOY_ROOT]"
    echo "  -p,--sshd-port=PORT        Port for SSH to listen for [$SSHD_PORT]"
    echo "  -n,--ndk=PATH              Path to the NDK"
    echo "                             [$NDK]"
    echo ""
}

while [ -n "$1" ]; do
    arg="$1"
    shift
    argval=$(expr "x$arg" : "^x[^=]*=\(.*\)$")
    case $arg in
        -h|--help)
            usage
            exit 0
            ;;
        -s|--device-id)
            ANDROID_SERIAL="$1"
            shift
            ;;
        --device-id=*)
            ANDROID_SERIAL="$argval"
            ;;
        -r|--root)
            DEPLOY_ROOT="$1"
            shift
            ;;
        --root=*)
            DEPLOY_ROOT="$argval"
            ;;
        -p|--sshd-port)
            SSHD_PORT="$1"
            shift
            ;;
        --sshd-port=*)
            SSHD_PORT="$argval"
            ;;
        -n|--ndk)
            NDK="$1"
            shift
            ;;
        --ndk=*)
            NDK="$argval"
            ;;
        -*)
            error "Unknown option: '$arg'"
            usage 1>&2
            exit 1
            ;;
        *)
            usage 1>&2
            exit 1
    esac
done

if [ -z "$NDK" -o -z "$DEPLOY_ROOT" -o -z "$SSHD_PORT" ]; then
    usage 1>&2
    exit 1
fi

echo $SSHD_PORT | grep -q '^[1-9][0-9]*$'
if [ $? -ne 0 ]; then
    error "Wrong SSHD port value: '$SSHD_PORT'"
    usage 1>&2
    exit 1
fi

if [ -z "$ANDROID_SERIAL" ]; then
    ANDROID_SERIAL=$(adb devices | grep '^[^\s][^\s]*\s\s*device$' | head -n 1 | cut -f 1)
    if [ -z "$ANDROID_SERIAL" ]; then
        error "Can't detect Android device for deploy"
        exit 1
    fi
    echo "=== Auto-detected Android device '$ANDROID_SERIAL'"
fi
export ANDROID_SERIAL

run()
{
    echo "## COMMAND: $@"
    "$@"
}

device_abi()
{
    adb shell getprop ro.product.cpu.abi | $SED 's,[[:cntrl:]]*,,g'
}

adb_shell()
{
    run adb shell "$@"
}

adb_push()
{
    run adb push "$@"
}

set_sshd_config_value()
{
    local file=$1
    local name=$2
    local value=$3

    if [ -z "$file" -o -z "$name" -o -z "$value" ]; then
        error "Usage: set_sshd_config_value file name value"
        return 1
    fi

    local warnstr='# deploy-posix-environment customized settings:'
    grep -q "^$warnstr$" $file
    if [ $? -ne 0 ]; then
        echo "" >>$file || return 1
        echo "$warnstr" >>$file || return 1
    fi

    $SED -i "s|^\($name\>.*\)$|#\1|g" $file || return 1
    echo "$name $value" >>$file || return 1
    return 0
}

DEVABI=$(device_abi)
if [ -z "$DEVABI" ]; then
    error "Can't detect main ABI for device '$ANDROID_SERIAL'"
    exit 1
fi

case $DEVABI in
    armeabi-v7a)
        DEVARCH=arm
        ;;
    arm64*)
        DEVARCH=arm64
        ;;
    x86|x86_64|mips|mips64)
        DEVARCH=$DEVABI
        ;;
    *)
        error "Unsupported device CPU ABI: '$DEVABI'"
        exit 1
esac

case $DEVARCH in
    arm)
        TCPREFIX=arm-linux-androideabi
        ;;
    arm64)
        TCPREFIX=aarch64-linux-android
        ;;
    mips)
        TCPREFIX=mipsel-linux-android
        ;;
    mips64)
        TCPREFIX=mips64el-linux-android
        ;;
    x86)
        TCPREFIX=i686-linux-android
        ;;
    x86_64)
        TCPREFIX=x86_64-linux-android
        ;;
esac

case $DEVARCH in
    x86|x86_64)
        TCNAME=$DEVARCH
        ;;
    *)
        TCNAME=$TCPREFIX
esac

case $DEVABI in
    armeabi*)
        ABI=armeabi-v7a-hard
        ;;
    *)
        ABI=$DEVABI
esac

STRIP=$NDK/toolchains/${TCNAME}-6/prebuilt/${HOST_OS}-${HOST_ARCH}/bin/${TCPREFIX}-strip
if [ ! -x "$STRIP" ]; then
    error "No 'strip' tool found for CPU architecture '$DEVARCH'"
    exit 1
fi

detect_package_root()
{
    local NAME=$1

    local ROOT="$NDK/packages/$NAME"
    local VERSION=$(ls -1 $ROOT/ | sort | uniq | tail -n 1)
    if [ -z "$VERSION" ]; then
        error "Can't detect version of package '$NAME'"
        return 1
    fi

    echo "$ROOT/$VERSION/$ABI"
}

RTAG=$(uuidgen | $SED 's,-,,g')

trap "rm -Rf /tmp/*.$RTAG" EXIT INT QUIT ABRT TERM

strip_debug_info()
{
    local src="$1"
    local dst="/tmp/$(basename $src)-$(uuidgen | $SED 's,-,,g').$RTAG"

    rm -f $dst 1>&2 || return 1
    mkdir -p $(dirname $dst) 1>&2 || return 1
    cp -f $src $dst 1>&2 || exit 1
    $STRIP --strip-unneeded $dst 1>&2 || return 1

    echo $dst
}

for d in bin etc lib libexec run sbin; do
    adb_shell mkdir -p $DEPLOY_ROOT/$d/ || exit 1
    adb_shell chmod 0755 $DEPLOY_ROOT/$d/ || exit 1
done
adb_shell mkdir -p $DEPLOY_ROOT/tmp/ || exit 1
adb_shell chmod 0777 $DEPLOY_ROOT/tmp/ || exit 1

deploy_libcrystax()
{
    local srcf=$(strip_debug_info $NDK/sources/crystax/libs/$ABI/libcrystax.so)
    test -n "$srcf" || return 1
    local dstf=$DEPLOY_ROOT/lib/libcrystax.so
    adb_push $srcf $dstf || return 1
    rm -f $srcf
    adb_shell chmod 0644 $dstf || return 1
}

deploy_libcrystax || return 1

for p in              \
        bash          \
        cpulimit      \
        gnu-coreutils \
        gnu-grep      \
        gnu-sed       \
        gnu-tar       \
        gnu-which     \
        htop          \
        info-unzip    \
        info-zip      \
        ; do
    PACKAGE_ROOT=$(detect_package_root $p)
    test -n "$PACKAGE_ROOT" || exit 1
    for f in $PACKAGE_ROOT/*; do
        srcf=$(strip_debug_info $f)
        test -n "$srcf" || exit 1
        dstf=$DEPLOY_ROOT/bin/$(basename $f)
        adb_shell mkdir -p $(dirname $dstf) || exit 1
        adb_push $srcf $dstf || exit 1
        adb_shell chmod 0755 $dstf || exit 1
        rm -f $srcf
    done
done

OPENSSH_ROOT=$(detect_package_root openssh)
test -n "$OPENSSH_ROOT" || exit 1

for f in $OPENSSH_ROOT/bin/* $OPENSSH_ROOT/sbin/* $OPENSSH_ROOT/libexec/*; do
    srcf=$(strip_debug_info $f)
    test -n "$srcf" || exit 1
    dstf=$DEPLOY_ROOT/$(echo $f | $SED "s,$OPENSSH_ROOT/,,")
    adb_shell mkdir -p $(dirname $dstf) || exit 1
    adb_push $srcf $dstf || exit 1
    adb_shell chmod 0755 $dstf || exit 1
    rm -f $srcf
done

for f in $OPENSSH_ROOT/etc/*; do
    srcf=/tmp/$(basename $f).$RTAG
    dstf=$DEPLOY_ROOT/$(echo $f | $SED "s,$OPENSSH_ROOT/,,")
    cat $f | $SED "s,\$DEPLOY_ROOT,$DEPLOY_ROOT,g" >$srcf || exit 1
    case $f in
        */sshd_config)
            set_sshd_config_value $srcf Port $SSHD_PORT || exit 1
            set_sshd_config_value $srcf PasswordAuthentication no || exit 1
            set_sshd_config_value $srcf UsePrivilegeSeparation no || exit 1
            set_sshd_config_value $srcf UseDNS no || exit 1
            set_sshd_config_value $srcf AllowAgentForwarding yes || exit 1
            set_sshd_config_value $srcf PermitTTY yes || exit 1
            set_sshd_config_value $srcf AuthorizedKeysFile "$DEPLOY_ROOT/.ssh/authorized_keys" || exit 1
            #set_sshd_config_value $srcf PidFile "$DEPLOY_ROOT/run/sshd.pid" || exit 1
            #set_sshd_config_value $srcf LogLevel DEBUG3 || exit 1
            #for t in rsa dsa ecdsa ed25519; do
            #    HOST_KEY=$DEPLOY_ROOT/etc/ssh_host_${t}_key
            #    echo "HostKey $HOST_KEY" >>$srcf || exit 1
            #done
    esac
    adb_shell mkdir -p $(dirname $dstf) || exit 1
    adb_push $srcf $dstf || exit 1
    adb_shell chmod 0644 $dstf || exit 1
    rm -f $srcf
done

MKCOREUTILS=/tmp/mkcoreutils.$RTAG
echo "cd $DEPLOY_ROOT/bin/ || exit 1" >$MKCOREUTILS
for u in $(cat $NDK/tools/coreutils.txt); do
    echo "rm -f $u || exit 1" >>$MKCOREUTILS
    echo "ln -s coreutils $u || exit 1" >>$MKCOREUTILS
done
adb_push $MKCOREUTILS $DEPLOY_ROOT/tmp/mkcoreutils || exit 1
adb_shell "HOME=$DEPLOY_ROOT LD_LIBRARY_PATH=$DEPLOY_ROOT/lib $DEPLOY_ROOT/bin/bash $DEPLOY_ROOT/tmp/mkcoreutils" || exit 1
adb_shell rm -f $DEPLOY_ROOT/mkcoreutils || exit 1

deploy_ncurses()
{
    local NCURSES_ROOT=$(detect_package_root ncurses)
    test -n "$NCURSES_ROOT" || return 1

    local f
    for f in clear infocmp tabs tic tput tset; do
        local srcf=$(strip_debug_info $NCURSES_ROOT/bin/$f)
        dstf=$DEPLOY_ROOT/bin/$f
        adb_shell mkdir -p $(dirname $dstf) || return 1
        adb_push $srcf $dstf || return 1
        adb_shell chmod 0755 $dstf || return 1
        rm -f $srcf
    done

    local archive=/tmp/ncurses-share.$RTAG/ncurses-share.tar.gz
    run mkdir -p $(dirname $archive) || return 1
    ( cd $NCURSES_ROOT/ && tar cf $archive share/ ) || return 1

    local dstf=$DEPLOY_ROOT/tmp/$(basename $archive)
    adb_push $archive $dstf || return 1
    rm -f $archive

    adb_shell "cd $DEPLOY_ROOT && LD_LIBRARY_PATH=$DEPLOY_ROOT/lib $DEPLOY_ROOT/bin/tar xvf $dstf" || return 1
    adb_shell rm -f $dstf || return 1
}

deploy_vim()
{
    local VIM_ROOT=$(detect_package_root vim)
    test -n "$VIM_ROOT" || return 1

    local dstf

    local f
    for f in vim xxd; do
        local srcf=$(strip_debug_info $VIM_ROOT/bin/$f)
        dstf=$DEPLOY_ROOT/bin/$f
        adb_shell mkdir -p $(dirname $dstf)
        adb_push $srcf $dstf || return 1
        adb_shell chmod 0755 $dstf || return 1
        rm -f $srcf
    done

    local mksymlinks=/tmp/vim-mksymlinks.$RTAG
    {
        for f in vi ex rvim rview view vimdiff; do
            echo "ln -sf vim $DEPLOY_ROOT/bin/$f || exit 1"
        done
    } | cat >$mksymlinks
    dstf=$DEPLOY_ROOT/tmp/vim-mksymlinks
    adb_push $mksymlinks $dstf || exit 1
    adb_shell chmod 0755 $dstf || exit 1
    adb_shell "HOME=$DEPLOY_ROOT $DEPLOY_ROOT/bin/bash --login -c $dstf" || exit 1
    adb_shell rm -f $dstf || exit 1

    local archive=/tmp/vim-share.$RTAG/vim-share.tar.gz
    run mkdir -p $(dirname $archive) || return 1
    ( cd $VIM_ROOT/ && tar cf $archive share/ ) || return 1

    local dstf=$DEPLOY_ROOT/tmp/$(basename $archive)
    adb_push $archive $dstf || return 1
    rm -f $archive

    adb_shell "cd $DEPLOY_ROOT && LD_LIBRARY_PATH=$DEPLOY_ROOT/lib $DEPLOY_ROOT/bin/tar xvf $dstf" || return 1
    adb_shell rm -f $dstf || return 1
}

deploy_ncurses || exit 1
deploy_vim     || exit 1

BASH_PROFILE=/tmp/bash_profile.$RTAG
cat >$BASH_PROFILE <<EOF
if [ "\$HOME" != "$DEPLOY_ROOT" ]; then
    echo "*** ERROR: HOME doesn't point to $DEPLOY_ROOT!" 1>&2
    echo "*** ERROR: Re-run Bash again with HOME=$DEPLOY_ROOT!" 1>&2
    exit 1
fi

umask 0022

alias mv='mv -i'
alias cp='cp -i'
alias ll='ls --color=auto -FAl'
alias tf='tail -F'

SHELL=\$HOME/bin/bash
export SHELL

TMP=\$HOME/tmp
TMPDIR=\$TMP
export TMP TMPDIR

TERMINFO=\$HOME/share/terminfo
export TERMINFO

VIMRUNTIME=\$HOME/share/vim
export VIMRUNTIME

LD_LIBRARY_PATH=\$HOME/lib
export LD_LIBRARY_PATH

PATH=\$HOME/bin:\$PATH
export PATH

cd \$HOME
EOF

adb_push $BASH_PROFILE $DEPLOY_ROOT/.bash_profile
rm -f $BASH_PROFILE

BASH="HOME=$DEPLOY_ROOT $DEPLOY_ROOT/bin/bash --login"
for t in rsa dsa ecdsa ed25519; do
    HOST_KEY=$DEPLOY_ROOT/etc/ssh_host_${t}_key
    adb_shell "$BASH -c 'test -f $HOST_KEY || $DEPLOY_ROOT/bin/ssh-keygen -t $t -N \"\" -f $HOST_KEY'" || exit 1
done

adb_shell "$BASH -c 'kill \`cat $DEPLOY_ROOT/run/sshd.pid 2>/dev/null\` 2>/dev/null'"
adb_shell "$BASH -c 'HOME=$DEPLOY_ROOT $DEPLOY_ROOT/sbin/sshd -x $DEPLOY_ROOT'"
