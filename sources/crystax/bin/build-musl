#!/bin/bash

TOOLCHAIN_DIR=$1
if [ "x$TOOLCHAIN_DIR" = "x" ]; then
    echo "Usage: $0 <toolchain-dir>" 1>&2
    exit 1
fi

cd $(dirname $0)/.. || exit 1

CRYSTAX_DIR=$(pwd)
NDK_DIR=$(cd $CRYSTAX_DIR/../.. && pwd)

ARCHS="arm x86 mips"

TMPDIR=/tmp/ndk-$USER/musl

HOST_OS=$(uname -s | tr '[A-Z]' '[a-z]')
if [ "x$HOST_OS" = "xcygwin" ]; then
    HOST_OS=windows
fi

HOST_ARCH=$(uname -m)

log()
{
    echo "$@"
}

error()
{
    echo "*** ERROR: $@" 1>&2
}

panic()
{
    echo "*** FATAL: $@" 1>&2
    exit 1
}

fail_panic()
{
    if [ $? -ne 0 ]; then
        panic "$@"
    fi
}

# $1: CPU architecture
default_toolchain_abi()
{
    case $1 in
        arm) echo "arm-linux-androideabi" ;;
        x86) echo "x86" ;;
        mips) echo "mipsel-linux-android" ;;
        *) error "Unknown CPU architecture: $1"; return 1 ;;
    esac
}

# $1: CPU architecture
cross_compile_prefix()
{
    case $1 in
        arm) echo "arm-linux-androideabi-" ;;
        x86) echo "i686-linux-android-" ;;
        mips) echo "mipsel-linux-android-" ;;
        *) error "Unknown CPU architecture: $1"; return 1 ;;
    esac
}

# $1: CPU architecture
arch_abis()
{
    case $1 in
        arm) echo "armeabi armeabi-v7a armeabi-v7a-hard" ;;
        x86) echo "x86" ;;
        mips) echo "mips" ;;
        *) error "Unknown CPU architecture: $1"; return 1 ;;
    esac
}

# $1: ABI
abi_cflags()
{
    case $1 in
        armeabi-v7a*)
            echo "-march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=softfp"
            ;;
        armeabi-v7a-hard)
            echo "-march=armv7-a -mfpu=vfpv3-d16 -mhard-float"
            ;;
        *)
            echo ""
            ;;
    esac
}

mkdir -p $TMPDIR
fail_panic "Couldn't create temporary directory"

trap "rm -Rf $TMPDIR" EXIT INT QUIT ABRT TERM

srcdir=$TMPDIR/src
rm -Rf $srcdir
mkdir -p $srcdir
fail_panic "Couldn't create temporary directory for musl sources"

(cd $TOOLCHAIN_DIR/musl && tar chf - *) | (cd $srcdir && tar xf -)
fail_panic "Couldn't copy musl sources to temporary directory"


for arch in $ARCHS; do
    HEADERS_COPIED=no
    for abi in $(arch_abis $arch); do
        log "Building musl for $abi"

        targetdir=$TMPDIR/$abi
        rm -Rf $targetdir
        mkdir -p $targetdir
        fail_panic "Couldn't create temporary directory for building musl $abi"

        PATH=$NDK_DIR/toolchains/$(default_toolchain_abi $arch)-4.9/prebuilt/${HOST_OS}-${HOST_ARCH}/bin:$PATH
        export PATH

        CFLAGS="$(abi_cflags $abi)"
        export CFLAGS

        CROSS_COMPILE=$(cross_compile_prefix $arch)
        export CROSS_COMPILE

        cd $srcdir && \
        make clean && \
        make distclean && \
        ./configure \
            --prefix=$targetdir \
            --enable-warnings \
            --disable-shared \
            && \
        make -j && \
        make install

        fail_panic "Couldn't build musl for $abi"

        if [ "x$HEADERS_COPIED" != "xyes" ]; then
            mkdir -p $CRYSTAX_DIR/include/crystax/musl/$arch/ && \
                (cd $targetdir/include/ && tar chf - *) | (cd $CRYSTAX_DIR/include/crystax/musl/$arch/ && tar xf -)
            fail_panic "Couldn't copy musl headers to CrystaX source tree"
            HEADERS_COPIED=yes
        fi

        mkdir -p $CRYSTAX_DIR/libs/$abi/musl && \
            (cd $targetdir/lib/ && tar chf - *) | (cd $CRYSTAX_DIR/libs/$abi/musl/ && tar xf -)
        fail_panic "Couldn't copy musl $abi libraries to CrystaX source tree"
    done
done
