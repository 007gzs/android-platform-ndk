#!/bin/bash

ABIS=armeabi,armeabi-v7a,armeabi-v7a-hard,mips,x86,arm64-v8a,mips64,x86_64

usage()
{
    echo "Usage: $0 [parameters]"
    echo ""
    echo "Common parameters:"
    echo ""
    echo "  -h,--help            Show this screen and exit"
    echo ""
    echo "Optional parameters:"
    echo ""
    echo "  -a,--abis=LIST       List of ABIs to check for"
    echo "                       [$ABIS]"
    echo ""
}

spaces_to_commas()
{
    echo "$@" | sed 's,  *, ,g' | tr ' ' ','
}

commas_to_spaces()
{
    echo "$@" | tr ',' ' '
}

while [ -n "$1" ]; do
    arg=$1
    shift
    argval=$(expr "x$arg" : "^x--[^=]*=\(.*\)$")
    case $arg in
        -h|--help)
            usage
            exit 0
            ;;
        -a|--abis)
            ABIS=$(spaces_to_commas $1)
            shift
            ;;
        --abis=*)
            ABIS=$(spaces_to_commas $argval)
            ;;
        *)
            usage 1>&2
            exit 1
    esac
done

GCC_VERSION=6

SKIP=""

SKIP="$SKIP \
    _Z16__libc_init_vdsov  \
    getauxval              \
    mallinfo               \
    "

SKIP="$SKIP                \
    __atomic_cmpxchg       \
    __atomic_dec           \
    __atomic_inc           \
    __atomic_swap          \
    "

SKIP="$SKIP                \
    _tolower_tab_          \
    _toupper_tab_          \
    isalnum_l              \
    isalpha_l              \
    isblank_l              \
    iscntrl_l              \
    isdigit_l              \
    isgraph_l              \
    islower_l              \
    isprint_l              \
    ispunct_l              \
    isspace_l              \
    isupper_l              \
    iswalnum_l             \
    iswalpha_l             \
    iswblank_l             \
    iswcntrl_l             \
    iswdigit_l             \
    iswgraph_l             \
    iswlower_l             \
    iswprint_l             \
    iswpunct_l             \
    iswspace_l             \
    iswupper_l             \
    iswxdigit_l            \
    isxdigit_l             \
    tolower_l              \
    toupper_l              \
    towlower_l             \
    towupper_l             \
    "

SKIP="$SKIP                \
    __ctype_get_mb_cur_max \
    __open                 \
    __page_shift           \
    __page_size            \
    _ctype_                \
    _tolower               \
    _toupper               \
    dlmalloc_usable_size   \
    "

SKIP_arm="                 \
    __aeabi_cfcmpeq        \
    __aeabi_cfcmple        \
    __aeabi_cfrcmple       \
    __aeabi_d2uiz          \
    __aeabi_fcmpeq         \
    __aeabi_fcmpge         \
    __aeabi_fcmpgt         \
    __aeabi_fcmple         \
    __aeabi_fcmplt         \
    __cmpsf2               \
    __eqsf2                \
    __fixunsdfsi           \
    __gesf2                \
    __gtsf2                \
    __lesf2                \
    __ltsf2                \
    __nesf2                \
    "

SKIP_mips="                \
    __fixdfdi              \
    __fixsfdi              \
    __fixunsdfdi           \
    __fixunssfdi           \
    _memset16              \
    _memset32              \
    "

SKIP_x86="                 \
    __popcount_tab         \
    "

SKIP_arm64="               \
    "

SKIP_mips64="              \
    "

SKIP_x86_64="              \
    _Znam                  \
    _ZnamRKSt9nothrow_t    \
    _Znwm                  \
    _ZnwmRKSt9nothrow_t    \
    "

MYDIR=$(cd $(dirname $0) 2>/dev/null && pwd)
TOPDIR=$(cd $MYDIR/.. 2>/dev/null && pwd)
NDK=$(cd $TOPDIR/../.. 2>/dev/null && pwd)
DEVELOPMENT=$(cd $NDK/../development 2>/dev/null && pwd)

error()
{
    echo "*** ERROR: $@" 1>&2
}

if [ -z "$MYDIR" -o -z "$TOPDIR" -o -z "$NDK" -o -z "$DEVELOPMENT" ]; then
    error "Can't detect NDK and Development directories"
fi

HOST_TAG=$(uname -s | tr '[A-Z]' '[a-z]')-$(uname -m)
case $HOST_TAG in
    linux-x86_64|darwin-x86_64)
        ;;
    *)
        error "Unsupported host: '$HOST_TAG'"
        exit 1
esac

USYMS=""

reset_undefined()
{
    USYMS=""
}

# $1: symbol
mark_as_undefined()
{
    local sym=$1
    if [ -z "$sym" ]; then
        error "Usage: mark_as_undefined symbol"
        exit 1
    fi

    if [ -z "$USYMS" ]; then
        USYMS="$sym"
    else
        USYMS="$USYMS $sym"
    fi
}

report_undefined()
{
    local lib=$1
    if [ -z "$lib" ]; then
        error "Usage: report_undefined libfile"
        exit 1
    fi
    if [ -n "$USYMS" ]; then
        local usyms=$(echo "$USYMS" | tr ' ' '\n' | sort | uniq)

        echo "*** These symbols are missing in $lib:"
        echo "$usyms"
        echo "*** TOTAL $(echo "$usyms" | wc -l) undefined symbols!"
    fi
}

required_symbols()
{
    local ARCH=$1
    if [ -z "$ARCH" ]; then
        error "Usage: required_symbols arch"
        exit 1
    fi

    local APILEVELS=$(ls -1 $DEVELOPMENT/ndk/platforms/ | \
        grep '^android-[0-9][0-9]*$' | \
        sed 's,^android-,,g' | \
        sort -n | \
        tail -n 1)

    {
        local lib
        for lib in libc libm libstdc++; do
            local apilevel
            for apilevel in $APILEVELS; do
                cat $DEVELOPMENT/ndk/platforms/android-${apilevel}/arch-$ARCH/symbols/${lib}.so.*.txt 2>/dev/null
            done
        done
    } | sort | uniq
}

# $1: ABI
check_abi()
{
    local libcrystax
    for libcrystax in $(find $TOPDIR/libs/$ABI -name 'libcrystax.so' -print); do
        local ABI=$1
        case $ABI in
            mips64)
                case $(basename $(dirname $libcrystax)) in
                    lib32*)
                        ABI=mips
                esac
                ;;
            x86_64)
                case $(basename $(dirname $libcrystax)) in
                    32)
                        ABI=x86
                esac
                ;;
        esac

        local ARCH
        case $ABI in
            armeabi*)
                ARCH=arm
                ;;
            arm64*)
                ARCH=arm64
                ;;
            mips|mips64|x86|x86_64)
                ARCH=$ABI
                ;;
            *)
                error "Unsupported ABI: '$ABI'"
                return 1
        esac

        local TCNAME
        case $ABI in
            armeabi*)
                TCNAME=arm-linux-androideabi
                ;;
            arm64*)
                TCNAME=aarch64-linux-android
                ;;
            mips)
                TCNAME=mipsel-linux-android
                ;;
            mips64)
                TCNAME=mips64el-linux-android
                ;;
            x86)
                TCNAME=x86
                ;;
            x86_64)
                TCNAME=x86_64
        esac

        local TCPREFIX
        case $ABI in
            x86)
                TCPREFIX=i686-linux-android
                ;;
            x86_64)
                TCPREFIX=x86_64-linux-android
                ;;
            *)
                TCPREFIX=$TCNAME
        esac

        if [ -z "$TCNAME" -o -z "$TCPREFIX" ]; then
            error "Can't detect toolchain for ABI '$ABI'"
            return 1
        fi

        local NM=$NDK/toolchains/${TCNAME}-${GCC_VERSION}/prebuilt/$HOST_TAG/bin/${TCPREFIX}-nm

        local lcsyms=$($NM $libcrystax | grep -v "^\s*U\>" | awk '{print $3}')

        reset_undefined

        local sym
        for sym in $(required_symbols $ARCH); do
            echo "$lcsyms" | grep -q -x -e "$sym" && continue

            skip=no
            for ssym in $SKIP $(eval echo \$SKIP_${ARCH}); do
                if [ "$sym" = "$ssym" ]; then
                    skip=yes
                    break
                fi
            done
            test "$skip" = "yes" && continue

            mark_as_undefined $sym
        done

        if [ -n "$USYMS" ]; then
            report_undefined $libcrystax
            return 1
        fi
    done
}

for ABI in $(commas_to_spaces $ABIS); do
    echo "## CHECK ABI '$ABI'"
    check_abi $ABI || exit 1
done
