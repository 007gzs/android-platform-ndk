#!/usr/bin/env ruby

require 'fileutils'
require 'pathname'
require 'digest'

TOPDIR = File.realpath(File.join(File.dirname(__FILE__), '..'))
SRCDIR = File.realpath(File.join(TOPDIR, '..', '..', '..', 'bionic'))

PRIVATEDIR = File.join(TOPDIR, 'gen', 'bionic')
PUBLICDIR  = File.join(TOPDIR, 'include')

ARCHS = [
    "arm",
    "x86",
    "mips",
    "arm64",
    "x86_64",
    "mips64",
]

class Generator
    def initialize
        @files = []
        @fixups = {}
    end

    def license
        @license = File.read(File.join(TOPDIR, 'LICENSE')).split("\n").map(&:chomp) if @license.nil?
        @license
    end
    private :license

    def relpath(path, from)
        Pathname.new(path).relative_path_from(Pathname.new(from)).to_s
    end
    private :relpath

    def fixup(name, &block)
        raise "Fixup '#{name}' already added" if @fixups.has_key?(name.to_s)
        raise "No code block given" unless block_given?
        @fixups[name.to_s] = lambda { |f| block.call(f) }
    end

    def add(f, options = {})
        raise "No such file: #{f}" unless File.exists?(File.join(SRCDIR, f))
        raise "File #{f} already added" if @files.include?(f)
        @files << {file: f, options: options}
    end

    def generate
        total = @files.size
        current = 0
        @files.each do |e|
            f = e[:file]
            options = e[:options]

            src = File.join(SRCDIR, f)
            mdst = File.join(options[:public] ? File.join(PUBLICDIR, 'crystax', 'bionic') : PRIVATEDIR, File.dirname(f), "mangled-#{File.basename(f)}")

            if options[:public]
                f = f.split('/')[2..-1].join('/') if f.split('/')[0..1] == ['libc', 'include']
                dst = File.join(PUBLICDIR, f)
            else
                dst = File.join(PRIVATEDIR, f)
            end

            next if File.exists?(dst) && File.exists?(mdst) &&
                File.mtime(dst)  >= File.mtime(mdst) &&
                File.mtime(mdst) >= File.mtime(src) &&
                File.mtime(dst)  >= File.mtime(__FILE__) &&
                File.mtime(mdst) >= File.mtime(__FILE__)

            current += 1
            puts "GEN  [#{current}/#{total}] #{f}"

            FileUtils.rm_f mdst
            FileUtils.mkdir_p File.dirname(mdst)
            FileUtils.cp src, mdst

            FileUtils.mkdir_p File.dirname(dst)
            File.open(dst, "w") do |df|
                df.puts "/* WARNING!!! THIS IS AUTO-GENERATED FILE!!! DO NOT MODIFY IT MANUALLY!!! */"
                df.puts "/* GENERATED BY: #{$0.gsub('//', '/')} */"
                df.puts ""

                df.puts "/*"
                license.each do |line|
                    df.puts " * #{line}".rstrip
                end
                df.puts " */"

                guard = "__CRYSTAX_INCLUDE_#{Digest::SHA256.new.update(relpath(dst, TOPDIR)).hexdigest}".upcase
                df.puts ""
                df.puts "#ifndef #{guard}"
                df.puts "#define #{guard}"

                fixups = options[:fixup]
                fixups = [] if fixups.nil?
                fixups = [fixups] unless fixups.is_a?(Array)
                df.puts "" unless fixups.empty?
                fixups.each do |fxname|
                    fx = @fixups[fxname.to_s]
                    raise "No such fixup: '#{fxname}'" if fx.nil?
                    fx.call(df)
                end

                df.puts ""
                if options[:public]
                    df.puts "#include <crystax/id.h>"
                    df.puts "#include <#{relpath(mdst, File.join(TOPDIR, 'include'))}>"
                else
                    df.puts "#include \"#{File.basename(mdst)}\""
                end

                df.puts ""
                df.puts "#endif /* #{guard} */"
            end
        end
    end
end

g = Generator.new

g.fixup :redefine_fcntl do |f|
    f.puts "#define fcntl __bionic_fcntl"
end

g.fixup :redefine_fcntl64 do |f|
    f.puts "#define __fcntl64 __bionic_fcntl"
end

# common headers
g.add "libc/include/machine/posix_limits.h"
g.add "libc/include/sys/auxv.h"
g.add "libc/private/ScopedReaddir.h"
g.add "libc/private/bionic_asm.h"
g.add "libc/private/bionic_macros.h"

# include/machine/asm.h
g.add "libc/arch-arm/include/machine/asm.h"
g.add "libc/arch-arm64/include/machine/asm.h"
g.add "libc/arch-mips/include/machine/asm.h"
g.add "libc/arch-mips64/include/machine/asm.h"
g.add "libc/arch-x86/include/machine/asm.h"
g.add "libc/arch-x86_64/include/machine/asm.h"

# fadvise
g.add "libc/arch-arm/syscalls/__arm_fadvise64_64.S"
g.add "libc/arch-arm64/syscalls/__fadvise64.S"
g.add "libc/arch-mips/syscalls/__fadvise64.S"
g.add "libc/arch-mips64/syscalls/__fadvise64.S"
g.add "libc/arch-x86/syscalls/__fadvise64.S"
g.add "libc/arch-x86_64/syscalls/__fadvise64.S"

# fallocate/fallocate64
g.add "libc/arch-arm/syscalls/fallocate64.S"
g.add "libc/arch-arm64/syscalls/fallocate.S"
g.add "libc/arch-mips/syscalls/fallocate64.S"
g.add "libc/arch-mips64/syscalls/fallocate.S"
g.add "libc/arch-x86/syscalls/fallocate64.S"
g.add "libc/arch-x86_64/syscalls/fallocate.S"

# fcntl/__fcntl64
g.add "libc/arch-arm/syscalls/__fcntl64.S",  fixup: "redefine_fcntl64"
g.add "libc/arch-arm64/syscalls/fcntl.S",    fixup: "redefine_fcntl"
g.add "libc/arch-mips/syscalls/__fcntl64.S", fixup: "redefine_fcntl64"
g.add "libc/arch-mips64/syscalls/fcntl.S",   fixup: "redefine_fcntl"
g.add "libc/arch-x86/syscalls/__fcntl64.S",  fixup: "redefine_fcntl64"
g.add "libc/arch-x86_64/syscalls/fcntl.S",   fixup: "redefine_fcntl"

# sysconf
g.add "libc/include/sys/sysconf.h", public: true
g.add "libc/include/sys/sysinfo.h", public: true
g.add "libc/bionic/sysconf.cpp"
g.add "libc/bionic/sysinfo.cpp"

# pipe2
g.add "libc/arch-arm/syscalls/pipe2.S"
g.add "libc/arch-arm64/syscalls/pipe2.S"
g.add "libc/arch-mips/syscalls/pipe2.S"
g.add "libc/arch-mips64/syscalls/pipe2.S"
g.add "libc/arch-x86/syscalls/pipe2.S"
g.add "libc/arch-x86_64/syscalls/pipe2.S"

g.generate
