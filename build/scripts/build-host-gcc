#!/usr/bin/env ruby
#
# Build host GCC that will be used to build with Crystax NDK
#
# Copy required GCC 4.9.2 source tarbal into /tmp/ directory and run this script.
# The result will be installed into /tmp/ndk-USER/host/gcc/x86_64-apple-darwin-GCC_VER
#
# NB: Only darwin build currently supported
#
# Copyright (c) 2015 CrystaX .NET.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY CrystaX .NET ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CrystaX .NET OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation
# are those of the authors and should not be interpreted as representing
# official policies, either expressed or implied, of CrystaX .NET.
#

module Crystax

  PKG_NAME = 'gcc'

end

require 'fileutils'
require_relative 'common.rb'
require_relative 'logger.rb'
require_relative 'commander.rb'


NDK_VER   = '10'
GCC_VER   = '4.9.2'
GMP_VER   = '6.0.0'
MPFR_VER  = '3.1.2'
MPC_VER   = '1.0.3'
ISL_VER   = '0.12.2'
CLOOG_VER = '0.18.3'

# restrict PATH to standard bin dirs
ENV['PATH'] = '/bin:/sbin:/usr/bin:/usr/sbin'
BASE_DIR = File.join('/tmp', "ndk-#{ENV['USER']}", 'host', 'gcc')


def build_library(name, ver, archive, args)
  Logger.msg "= building #{name.upcase} #{ver}"
  file = File.join(Common::NDK_ROOT_DIR, 'toolchain', name, archive)
  FileUtils.cd(BASE_DIR) { Commander.run "tar xf #{file}" }
  dir = File.join(BASE_DIR, "#{name}-#{ver}")
  FileUtils.cd(dir) do
    Commander::run "#{File.join(dir, 'configure')} #{args.join(' ')}"
    Commander::run "make -j #{Common.num_jobs}"
    Commander::run "make install"
  end
end


begin
  # todo: parse options
  Common.verbose = true

  prefixdir = File.join(BASE_DIR, "libs")
  FileUtils.mkdir_p prefixdir

  Logger.open_log_file File.join(BASE_DIR, 'build-host-gcc.log')
  # todo: os
  Logger.msg "building host GCC #{GCC_VER}; os: darwin"

  build_library 'gmp',    GMP_VER,   "gmp-#{GMP_VER}.tar.bz2",    ["--prefix=#{prefixdir}", "--disable-shared", "--enable-cxx"]
  build_library 'mpfr',   MPFR_VER,  "mpfr-#{MPFR_VER}.tar.bz2",  ["--prefix=#{prefixdir}", "--disable-shared", "--with-gmp=#{prefixdir}"]
  build_library 'mpc',    MPC_VER,   "mpc-#{MPC_VER}.tar.gz",     ["--prefix=#{prefixdir}", "--disable-shared", "--with-gmp=#{prefixdir}", "--with-mpfr=#{prefixdir}"]
  build_library 'isl',    ISL_VER,   "isl-#{ISL_VER}.tar.bz2",    ["--prefix=#{prefixdir}", "--disable-shared", "--with-gmp-prefix=#{prefixdir}"]
  build_library 'cloog',  CLOOG_VER, "cloog-#{CLOOG_VER}.tar.gz", ["--prefix=#{prefixdir}", "--disable-shared", "--with-gmp-prefix=#{prefixdir}", "--with-isl-prefix=#{prefixdir}"]

  Logger.msg "= building GCC #{GCC_VER}"
  gccfile = "/tmp/gcc-#{GCC_VER}.tar.bz2"
  FileUtils.cd(BASE_DIR) { Commander.run "tar xf #{gccfile}" }
  srcdir = File.join(BASE_DIR, "gcc-#{GCC_VER}")
  builddir = File.join(BASE_DIR, 'build')
  FileUtils.mkdir_p(builddir)
  installdir = File.join(BASE_DIR, "x86_64-apple-darwin-#{GCC_VER}")
  FileUtils.mkdir_p installdir
  FileUtils.cd(builddir) do
    args = ["--prefix=#{installdir}",
            "--enable-checking=release",
            "--with-gmp=#{prefixdir}",
            "--with-mpfr=#{prefixdir}",
            "--with-mpc=#{prefixdir}",
            "--with-isl=#{prefixdir}",
            "--with-cloog=#{prefixdir}",
            "--enable-languages=c,c++",
            "--with-pkgversion=\'Crystax NDK #{NDK_VER}\'"
           ]
    Commander::run "#{File.join(srcdir, 'configure')} #{args.join(' ')}"
    Commander::run "make -j #{Common.num_jobs}"
    Commander::run "make install"
  end

rescue SystemExit => e
  exit e.status
rescue Exception => e
  Logger.log_exception(e)
  exit 1
else
  #Builder.clean
end
