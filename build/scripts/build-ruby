#!/usr/bin/env ruby
#
# Build RUBY to use it with Crystax NDK
#
# Copyright (c) 2015 CrystaX .NET.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY CrystaX .NET ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CrystaX .NET OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation
# are those of the authors and should not be interpreted as representing
# official policies, either expressed or implied, of CrystaX .NET.
#

require_relative 'versions.rb'

module Crystax

  PKG_NAME = 'ruby'

end

require 'fileutils'
require_relative 'logger.rb'
require_relative 'commander.rb'
require_relative 'builder.rb'
require_relative 'cache.rb'


# line: #define RUBY_VERSION "2.2.2"
def check_version
  v = File.read("#{Common::SRC_DIR}/version.h").split("\n").select { |s| s =~ /#define RUBY_VERSION/ }
  raise "can't find '#define RUBY_VERSION' string" if !v or v.size == 0
  Crystax::check_version v[0].split(' ')[2].split('"')[1]
end

def copy_rugged
  dst = "#{Common::VENDOR_DIR}/ruby/ext/rugged"
  src = "#{Common::VENDOR_DIR}/rugged"
  FileUtils.mkdir_p "#{dst}/lib"
  FileUtils.cp_r Dir["#{src}/ext/rugged/*"], "#{dst}/"
  FileUtils.cp_r Dir["#{src}/lib/*"], "#{dst}/lib/"
  FileUtils.mv "#{dst}/extconf.rb.crystax", "#{dst}/extconf.rb"
end


def build_libffi(installdir)
  Logger.log_msg "= building libffi"
  srcdir = "#{Common::VENDOR_DIR}/libffi"
  libver = File.read("#{srcdir}/doc/version.texi").split("\n")[3].split(' ')[2]
  if libver != Crystax::VERSIONS['libffi']
    raise "bad libffi version: repository: #{libver}; expected: #{Crystax::VERSIONS['libffi']}"
  end
  FileUtils.cd(srcdir) { Commander::run "./autogen.sh" }
  builddir = "#{Common::BUILD_BASE}/libffi"
  FileUtils.mkdir_p(builddir)
  FileUtils.cd(builddir) do
    env = { 'CC' => Builder.cc,
            'CFLAGS' => Builder.cflags
          }
    if Common.target_os == 'windows'
      env['PATH'] = Builder.toolchain_path_and_path
    end
    args = ["--prefix=#{installdir}",
            "--host=#{Builder.configure_host}",
            "--disable-shared"
           ]
    Commander.run env, "#{srcdir}/configure #{args.join(' ')}"
    Commander.run env, "make -j #{Common::num_jobs}"
    # here 'make check' requires DejaGNU installed so we do not run it
    # Commander::run env, "make check" unless Common::no_check?
    Commander.run env, "make install"
  end
  FileUtils.cp_r "#{installdir}/lib/libffi-#{Crystax.version('libffi')}/include", "#{installdir}/"
  ilib = Common.target_cpu == 'x86' ? 'lib32' : 'lib'
  FileUtils.rm "#{installdir}/#{ilib}/libffi.la"
  Builder.clean_src(srcdir) unless Common.no_clean?
end


def install_gems(*gems)
  args = ["--no-document", "--bindir #{Common.install_dir}/bin"]
  env = { 'GEM_HOME' => "#{Common.install_dir}/lib/ruby/gems/2.2.0",
          'GEM_PATH' => "#{Common.install_dir}/lib/ruby/gems/2.2.0",
          'SSL_CERT_FILE' => Common.ssl_cert_file
        }

  if Common::target_os != 'windows'
    gem = "#{Common.install_dir}/bin/gem"
  else
    gem = "/usr/bin/gem"
  end

  Commander::run env, "#{gem} install -V --backtrace #{gems.join(' ')} #{args.join(' ')}"
end


begin
  Common.parse_options

  Logger.open_log_file Common.log_file
  archive = Common.make_archive_name
  Logger.msg "Building #{Crystax::PKG_NAME} for #{Common.target_platform}"

  if Cache.try?(archive)
    Logger.msg "done"
    exit 0
  end

  if Common.target_os == 'windows'
    libsdir = "#{Common::BUILD_BASE}/libs"
    FileUtils.mkdir_p([Common::BUILD_BASE, "#{libsdir}/lib", "#{libsdir}/include"])
    build_libffi(libsdir)
  end

  zlibdir    = Builder.prepare_dependency('zlib')
  openssldir = Builder.prepare_dependency('openssl')
  libssh2dir = Builder.prepare_dependency('libssh2')
  libgit2dir = Builder.prepare_dependency('libgit2')

  Logger.log_msg "= building #{archive}; args: #{ARGV}"
  check_version
  copy_rugged
  FileUtils.cd(Common::SRC_DIR) { Commander.run "autoconf" }
  FileUtils.mkdir_p(Common::BUILD_DIR)
  cflags  = "#{Builder.cflags}  -I#{zlibdir}/include"
  ldflags = "-L#{libssh2dir}/lib -L#{libgit2dir}/lib -L#{zlibdir}/lib"
  libs    = '-lz -lgit2 -lssh2 -lz'
  path    = '/bin:/usr/bin:/sbin:/usr/sbin'
  if Common.target_os == 'windows'
    cflags  += " -I#{libsdir}/include"
    ldflags += " -L#{libsdir}/lib"
    libs = "#{zlibdir}/lib/libz.a #{libgit2dir}/lib/libgit2.a #{libssh2dir}/lib/libssh2.a #{zlibdir}/lib/libz.a"
    path = Builder.toolchain_path_and_path
  end
  FileUtils.cd(Common::BUILD_DIR) do
    env = { 'CC' => Builder.cc,
            'CFLAGS' => cflags,
            'LDFLAGS' => ldflags,
            'DESTDIR' => Common.install_dir,
            'LIBS' => libs,
            'RUGGED_CFLAGS' => "#{cflags} -DRUBY_UNTYPED_DATA_WARNING=0 -I#{openssldir}/include -I#{libssh2dir}/include -I#{libgit2dir}/include",
            'RUGGED_MAKEFILE' => "#{Common::BUILD_DIR}/ext/rugged/Makefile",
            'PATH' => path,
            'SSL_CERT_FILE' => Common.ssl_cert_file
          }
    args = ["--prefix=/",
            "--host=#{Builder.configure_host}",
            "--disable-install-doc",
            "--enable-load-relative",
            "--with-openssl-dir=#{openssldir}",
            "--with-static-linked-ext",
            "--without-gmp",
            "--without-tk",
            "--without-gdbm",
            #"--disable-shared",
            "--enable-bundled-libyaml"
           ]
    Commander::run env, "#{Common::SRC_DIR}/configure #{args.join(' ')}"
    Commander::run env, "make -j #{Common::num_jobs} V=1"
    Commander::run env, "make check" unless Common.no_check? or Common.different_os?
    Commander::run env, "make install"
  end

  install_gems 'rspec', 'minitest'

  Cache.add(archive)
  Cache.unpack(archive)

rescue SystemExit => e
  exit e.status
rescue Exception => e
  Logger.log_exception(e)
  exit 1
else
  Builder.clean
end
