#!/usr/bin/env ruby
#
# Build RUBY to use it with Crystax NDK
#
# Copyright (c) 2015 CrystaX .NET.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY CrystaX .NET ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CrystaX .NET OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation
# are those of the authors and should not be interpreted as representing
# official policies, either expressed or implied, of CrystaX .NET.
#

require_relative 'versions.rb'

require 'fileutils'
require_relative 'logger.rb'
require_relative 'commander.rb'
require_relative 'builder.rb'
require_relative 'cache.rb'


# line: #define RUBY_VERSION "2.2.2"
def check_version(srcdir, version)
  v = File.read("#{srcdir}/version.h").split("\n").select { |s| s =~ /#define RUBY_VERSION/ }
  raise "can't find '#define RUBY_VERSION' string" if !v or v.size == 0
  srcver = v[0].split(' ')[2].split('"')[1]
  if srcver != version
    raise "bad ruby version: repository: #{srcver}; expected: #{version}"
  end
end

def copy_rugged(dstdir)
  dst = "#{dstdir}/ext/rugged"
  src = "#{Common::VENDOR_DIR}/rugged"
  FileUtils.mkdir_p "#{dst}/lib"
  FileUtils.cp_r Dir["#{src}/ext/rugged/*"], "#{dst}/"
  FileUtils.cp_r Dir["#{src}/lib/*"], "#{dst}/lib/"
  FileUtils.mv "#{dst}/extconf.rb.crystax", "#{dst}/extconf.rb"
end


# def build_libffi(installdir)
#   Logger.log_msg "= building libffi"
#   raise "libffi required only for windows" unless Common.target_os == 'windows'
#   # check version
#   srcdir = "#{Common::VENDOR_DIR}/libffi"
#   libver = File.read("#{srcdir}/doc/version.texi").split("\n")[3].split(' ')[2]
#   if libver != Crystax::VERSIONS['libffi']
#     raise "bad libffi version: repository: #{libver}; expected: #{Crystax::VERSIONS['libffi']}"
#   end
#   # copy sources
#   FileUtils.cp_r srcdir, Common::BUILD_BASE
#   #
#   builddir = "#{Common::BUILD_BASE}/libffi"
#   FileUtils.cd(builddir) do
#     # apply patch from ruby sources
#     Commander.run "patch -p1 < #{Common::VENDOR_DIR}/ruby/ext/fiddle/win32/libffi-3.2.1-mswin.patch"
#     # confgure
#     Commander::run "./autogen.sh"
#     env = { 'CC' => Builder.cc,
#             'CFLAGS' => Builder.cflags,
#             'PATH' => Builder.toolchain_path_and_path
#           }
#     args = ["--prefix=#{installdir}",
#             "--host=#{Builder.configure_host}",
#             "--disable-shared"
#            ]
#     Commander.run env, "./configure #{args.join(' ')}"
#     # build and install
#     # libffi 'make check' requires DejaGNU installed so we do not run it
#     Commander.run env, "make -j #{Common::num_jobs}"
#     Commander.run env, "make install"
#   end
#   FileUtils.cp_r "#{installdir}/lib/libffi-#{Crystax.version('libffi')}/include", "#{installdir}/"
#   ilib = Common.target_cpu == 'x86' ? 'lib32' : 'lib'
#   FileUtils.rm "#{installdir}/#{ilib}/libffi.la"
# end


def install_gems(options, install_dir, *gems)
  args = ["--no-document", "--bindir #{install_dir}/bin"]
  env = { 'GEM_HOME' => "#{install_dir}/lib/ruby/gems/2.2.0",
          'GEM_PATH' => "#{install_dir}/lib/ruby/gems/2.2.0",
          'SSL_CERT_FILE' => Common.host_ssl_cert_file(options.host_os)
        }

  # if Common::target_os != 'windows'
  #   gem = "#{install_dir}/bin/gem"
  # else
  #   gem = "/usr/bin/gem"
  # end

  Commander.run env, "gem install -V --backtrace #{gems.join(' ')} #{args.join(' ')}"
end


PKG_NAME = 'ruby'


begin
  options = Common.parse_build_options(PKG_NAME)
  Logger.open_log_file options.log_file, options.rename_log?, options.verbose?
  Logger.start_msg PKG_NAME, options.target_platform

  ver, bldnum, paths, archive = Common.make_build_data(PKG_NAME, options)

  if !options.force? and Cache.try?(archive)
    Logger.msg "done"
    exit 0
  end

  # if Common.target_os == 'windows'
  #   libsdir = "#{Common::BUILD_BASE}/libs"
  #   FileUtils.mkdir_p([Common::BUILD_BASE, "#{libsdir}/lib", "#{libsdir}/include"])
  #   build_libffi(libsdir)
  # end

  paths[:zlib_dir]    = Builder.build_zlib    options, paths
  paths[:openssl_dir] = Builder.build_openssl options, paths
  paths[:libssh2_dir] = Builder.build_libssh2 options, paths
  paths[:libgit2_dir] = Builder.build_libgit2 options, paths

  Logger.log_msg "= building #{archive}; args: #{ARGV}"
  check_version paths[:src_dir], ver
  Builder.copy_sources paths[:src_dir], paths[:build_base_dir]
  copy_rugged paths[:build_dir]
  FileUtils.cd(paths[:build_dir]) do
    zlib_dir    = paths[:zlib_dir]
    openssl_dir = paths[:openssl_dir]
    libssh2_dir = paths[:libssh2_dir]
    libgit2_dir = paths[:libgit2_dir]
    #
    cflags  = "#{Builder.cflags(options)}  -I#{zlib_dir}/include"
    ldflags = "-L#{libssh2_dir}/lib -L#{libgit2_dir}/lib -L#{zlib_dir}/lib"
    if options.target_os != 'windows'
      libs = '-lz -lgit2 -lssh2 -lz'
    else
      # cflags  += " -I#{libsdir}/include -g"
      # ldflags += " -L#{libsdir}/lib -g"
      libs     = "#{zlib_dir}/lib/libz.a #{libgit2_dir}/lib/libgit2.a #{libssh2_dir}/lib/libssh2.a #{zlib_dir}/lib/libz.a"
    end
    env = { 'CC' => Builder.cc(options),
            'CFLAGS' => cflags,
            'LDFLAGS' => ldflags,
            'DESTDIR' => paths[:install_dir],
            'LIBS' => libs,
            'RUGGED_CFLAGS' => "#{cflags} -DRUBY_UNTYPED_DATA_WARNING=0 -I#{openssl_dir}/include -I#{libssh2_dir}/include -I#{libgit2_dir}/include",
            'RUGGED_MAKEFILE' => "#{paths[:build_dir]}/ext/rugged/Makefile",
            'PATH' => Builder.toolchain_path_and_path(options),
            'SSL_CERT_FILE' => Common.host_ssl_cert_file(options.host_os)
          }
    args = ["--prefix=/",
            "--host=#{Builder.configure_host(options)}",
            "--disable-install-doc",
            "--enable-load-relative",
            "--with-openssl-dir=#{openssl_dir}",
            "--with-static-linked-ext",
            "--without-gmp",
            "--without-tk",
            "--without-gdbm",
            "--enable-bundled-libyaml"
           ]
    Commander.run "autoconf"
    Commander.run env, "./configure #{args.join(' ')}"
    Commander.run env, "make -j #{options.num_jobs} V=1"
    Commander.run env, "make check" unless options.no_check?
    Commander.run env, "make install"
  end

  install_gems options, paths[:install_dir], 'rspec', 'minitest'

  Cache.add archive, paths[:build_base_dir]
  #Cache.unpack(archive)

rescue SystemExit => e
  exit e.status
rescue Exception => e
  Logger.log_exception(e)
  exit 1
else
  FileUtils.rm_rf paths[:build_base_dir] unless options.no_clean?
end
