#!/usr/bin/env ruby
#
# Install Crew Utilities
#
# Copyright (c) 2015 CrystaX .NET.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY CrystaX .NET ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CrystaX .NET OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation
# are those of the authors and should not be interpreted as representing
# official policies, either expressed or implied, of CrystaX .NET.
#

require 'digest'
require_relative 'common.rb'
require_relative 'cache.rb'
require_relative 'logger.rb'


begin
  options = Common.parse_install_options

  Logger.open_log_file options.log_file, options.rename_log?, options.verbose?
  Logger.start_install_msg options.target_platform
  Logger.log_msg "= will install CREW utilities into directory: #{options.out_dir}"
  Logger.log_msg "= using DOWLOAD_BASE: #{Global::DOWNLOAD_BASE}"
  Logger.log_msg "= using target platform: #{options.target_platform}"

  path = File.dirname($0)

  Common::CREW_UTILS.each do |name|
    args = (name == 'curl' or name == 'ruby') ? ARGV << '--no-check' : ARGV
    Logger.msg "Install #{options.target_platform} #{name}"
    release, _, archive, formula = Common.make_build_data(name, options)
    if Cache.exists? archive
      Logger.log_msg "= using cached file: #{archive}"
      Cache.unpack archive, options.out_dir
    else
      url = "#{Global::DOWNLOAD_BASE}/utils/#{name}/archive"
      Logger.log_msg "= cached file not found"
      Logger.log_msg "= try to download archive: #{url}"
      file = download_archive(url)
      Logger.log_msg "= checking sha256 of the downloaded file: #{file}"
      if Digest::SHA256.hexdigest(File.read(archive, mode: "rb")) != release.shasum
        raise "bad SHA256 sum of the file #{file} for #{name} release #{release}"
      end
      Logger.log_msg "= unpack downloaded file: #{file}"
      Commander::run "7z x -y -o#{options.out_dir} #{file}"
    end
    formula.link release, File.join(Pathname.new(options.out_dir).realpath.to_s, 'prebuilt', options.target_platform)
  end

rescue SystemExit => e
  exit e.status
rescue Exception => e
  Logger.log_exception(e)
  exit 1
end
