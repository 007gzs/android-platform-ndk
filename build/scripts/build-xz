#!/usr/bin/env ruby
#
# Build XZ Utils to use them with Crystax NDK
#
# Copyright (c) 2015 CrystaX .NET.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY CrystaX .NET ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CrystaX .NET OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation
# are those of the authors and should not be interpreted as representing
# official policies, either expressed or implied, of CrystaX .NET.
#

require 'fileutils'
require 'json'
require_relative 'logger.rb'
require_relative 'commander.rb'
require_relative 'builder.rb'
require_relative 'cache.rb'


#
def check_version(srcdir, version)
  major, minor, patch = nil
  File.readlines("#{srcdir}/src/liblzma/api/lzma/version.h").each do |line|
    case line
    when /^#define LZMA_VERSION_MAJOR/
      major = line.split(' ')[2]
    when /^#define LZMA_VERSION_MINOR/
      minor = line.split(' ')[2]
    when /^#define LZMA_VERSION_PATCH/
      patch = line.split(' ')[2]
    end
  end
  raise "failed to parse version.h: major was not set" if !major
  raise "failed to parse version.h: minor was not set" if !minor
  raise "failed to parse version.h: patch was not set" if !patch
  srcver = "#{major}.#{minor}.#{patch}"
  if srcver != version
    raise "bad xz version: repository: #{srcver}; expected: #{version}"
  end
end


def gettetx_path
  v = (`brew list --versions gettext`).split(' ')
  raise "failed to find gettext version: #{v}" unless v.size == 2 and v[0] == 'gettext'
  "/usr/local/Cellar/gettext/#{v[1]}/bin"
end


PKG_NAME = 'xz'


begin
  options = Common.parse_build_options PKG_NAME
  Logger.open_log_file options.log_file, options.rename_log?, options.verbose?
  Logger.start_build_msg PKG_NAME, options.target_platform

  release, paths, archive, formula = Common.make_build_data PKG_NAME, options

  if Cache.try?(archive) and !options.force?
    Logger.log_msg "= using cached file: #{archive}"
  else
    Logger.log_msg "= building #{archive}; args: #{ARGV}"
    check_version paths[:src], release.version
    Builder.copy_sources paths[:src], paths[:build_base]
    FileUtils.mkdir_p(paths[:install])
    prefix = Pathname.new(paths[:install]).realpath
    FileUtils.cd(paths[:build]) do
      env = { 'CC'     => Builder.cc(options),
              'CFLAGS' => Builder.cflags(options),
              'LANG'   => 'C',
            }
      case options.target_os
      when 'darwin'
        env['PATH'] = "#{gettetx_path}:#{ENV['PATH']}"
      when 'windows'
        env['PATH'] = Builder.toolchain_path_and_path(options)
        env['RC'] = "x86_64-w64-mingw32-windres -F pe-i386" if options.target_cpu == 'x86'
      end
      Commander.run env, "./autogen.sh"
      args = ["--prefix=#{prefix}",
              "--host=#{Builder.configure_host(options)}",
              "--disable-nls",
              "--disable-xzdec",
              "--disable-lzmadec",
              "--disable-lzmainfo",
              "--disable-lzma-links",
              "--disable-scripts",
              "--disable-doc",
              "--disable-shared",
              "--with-sysroot"
             ]
      Commander.run env, "./configure #{args.join(' ')}"
      Commander.run env, "make -j #{options.num_jobs}"
      Commander.run env, "make check" unless options.no_check?
      Commander.run env, "make install"
      # remove unneeded files before packaging
      FileUtils.cd(prefix) { FileUtils.rm_rf ['bin/unxz', 'bin/xzcat', 'lib/liblzma.la', 'lib/pkgconfig', 'share'] }
      # add properties file
      Common.write_properties prefix, release
    end

    platform_sym = options.target_platform_as_sym
    release.shasum = { platform_sym => Cache.add(archive, paths[:build_base]) }
    Common.update_release_shasum formula.path, release, platform_sym if options.update_sha256_sums?
  end

  if options.same_platform?
    Cache.unpack(archive, Common::NDK_DIR)
    Common.write_active_file(Common::NDK_DIR, options.host_platform, PKG_NAME, release)
  end

rescue SystemExit => e
  exit e.status
rescue Exception => e
  Logger.log_exception(e)
  exit 1
else
  FileUtils.rm_rf paths[:build_base] unless options.no_clean?
end
