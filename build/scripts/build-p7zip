#!/usr/bin/env ruby
#
# Build p7zip to use it with Crystax NDK
#
# Copyright (c) 2015 CrystaX .NET.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY CrystaX .NET ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CrystaX .NET OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation
# are those of the authors and should not be interpreted as representing
# official policies, either expressed or implied, of CrystaX .NET.
#


require 'fileutils'

require_relative 'common.rb'
require_relative 'logger.rb'
require_relative 'commander.rb'
require_relative 'builder.rb'
require_relative 'cache.rb'


# ChangeLog file should begin with line: Version 9.20.1
#
def check_version(srcdir, version)
  v = File.read("#{srcdir}/ChangeLog").split("\n").select { |s| s =~ /^Version/ }
  raise "can't find 'Version' string" if !v or v.size == 0
  srcver = v[0].split(' ')[1]
  if srcver != version
    raise "bad p7zip version: repository: #{srcver}; expected: #{version}"
  end
end


def makefile_name(os, cpu)
  case os
  when 'darwin'
    cpu == 'x86' ? "makefile.macosx_32bits" : "makefile.macosx_64bits"
  when 'linux'
    cpu == 'x86' ? "makefile.linux_x86" : "makefile.linux_amd64"
  else
    raise "unsupported OS #{os}"
  end
end


PKG_NAME = 'p7zip'


begin
  options = Common.parse_build_options PKG_NAME
  Logger.open_log_file options.log_file, options.rename_log?, options.verbose?
  Logger.start_build_msg PKG_NAME, options.target_platform

  release, paths, archive, formula = Common.make_build_data PKG_NAME, options

  if Cache.try?(archive) and !options.force?
    Logger.log_msg "= using cached file: #{archive}"
  else
    Logger.log_msg "= building #{archive}; args: #{ARGV}"
    check_version paths[:src_dir], release.version
    if options.target_os == 'windows'
      Logger.msg "= coping windows prebuilts"
      dstdir = "#{paths[:install_dir]}/bin"
      FileUtils.mkdir_p(dstdir)
      pdir = "#{Common::NDK_ROOT_DIR}/platform/prebuilts/7zip/windows"
      if options.target_cpu == 'x86'
        FileUtils.cd("#{pdir}/32") { FileUtils.cp '7za.exe', "#{dstdir}/7za.exe" }
      else
        FileUtils.cd("#{pdir}/64") do
          FileUtils.cp '7z.exe', "#{dstdir}/7za.exe"
          FileUtils.cp '7z.dll', "#{dstdir}/7z.dll"
        end
      end
    else
      Builder.copy_sources paths[:src_dir], paths[:build_base_dir]
      makefile = makefile_name options.target_os, options.target_cpu
      FileUtils.cd(paths[:build_dir]) do
        FileUtils.cp makefile, 'makefile.machine'
        args = ["CRYSTAX_CC=#{Builder.cc(options)}",
                "CRYSTAX_CXX=#{Builder.cxx(options)}",
                "CRYSTAX_FLAGS=\"#{Builder.cflags(options)}\""
               ]
        Commander::run "make -j #{options.num_jobs} #{args.join(' ')}"
        Commander::run "make test #{args.join(' ')}" unless options.no_check?
        bindir = "#{paths[:install_dir]}/bin"
        FileUtils.mkdir_p bindir
        FileUtils.cp 'bin/7za', bindir
      end
    end

    # add properties file
    Common.write_properties paths[:install_dir], release

    platform_sym = options.target_platform_as_sym
    release.shasum = { platform_sym => Cache.add(archive, paths[:build_base_dir]) }
    Common.update_release_shasum formula.path, release, platform_sym
  end

  if options.same_platform?
    Cache.unpack(archive, Common::NDK_DIR)
    formula.link(release, File.join(Common::NDK_DIR, 'prebuilt', options.host_platform))
  end

rescue SystemExit => e
  exit e.status
rescue Exception => e
  Logger.log_exception(e)
  exit 1
else
  FileUtils.rm_rf paths[:build_base_dir] unless options.no_clean?
end
