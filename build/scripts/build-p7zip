#!/usr/bin/env ruby
#
# Build p7zip to use it with Crystax NDK
#
# Copyright (c) 2015 CrystaX .NET.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY CrystaX .NET ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CrystaX .NET OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation
# are those of the authors and should not be interpreted as representing
# official policies, either expressed or implied, of CrystaX .NET.
#


require_relative 'versions.rb'

module Crystax

  PKG_NAME = 'p7zip'

end


require 'fileutils'
require_relative 'logger.rb'
require_relative 'commander.rb'
require_relative 'builder.rb'
require_relative 'cache.rb'
require_relative 'exceptions.rb'


def makefile_name
  case Common.target_os
  when 'darwin'
    Common.target_cpu == 'x86' ? "makefile.macosx_32bits" : "makefile.macosx_64bits"
  when 'linux'
    Common.target_cpu == 'x86' ? "makefile.linux_x86" : "makefile.linux_amd64"
  else
    raise "unsupported"
  end
end


begin
  Common.parse_options

  Logger.open_log_file Common.log_file
  archive = Common.make_archive_name

  if Cache.try?(archive)
    Logger.msg "done"
    exit 0
  end

  Logger.msg "building #{archive}; args: #{ARGV}"
  if Common.target_os == 'windows'
    Logger.msg "= coping windows prebuilts"
    FileUtils.mkdir_p(Common::INSTALL_DIR)
    pdir = "#{Common::NDK_ROOT_DIR}/platform/prebuilts/7zip/windows"
    if Common.target_cpu == 'x86'
      FileUtils.cd("#{pdir}/32") { FileUtils.cp '7za.exe', "#{Common::INSTALL_DIR}/7za.exe" }
    else
      FileUtils.cd("#{pdir}/64") do
        FileUtils.cp '7z.exe', "#{Common::INSTALL_DIR}/7za.exe"
        FileUtils.cp '7z.dll', "#{Common::INSTALL_DIR}/7z.dll"
      end
    end
  else
    # todo: check that the specified version and the repository version are the same
    Builder.copy_sources
    FileUtils.cd(Common::BUILD_DIR) do
      FileUtils.cp makefile_name, 'makefile.machine'
      args = ["CRYSTAX_CC=#{Builder.cc}",
              "CRYSTAX_CXX=#{Builder.cxx}",
              "CRYSTAX_FLAGS=\"#{Builder.cflags}\""
             ]
      Commander::run "make -j #{Common.num_jobs} #{args.join(' ')}"
      Commander::run "make test #{args.join(' ')}" unless Common.no_check? or Common.different_os?
    end
    FileUtils.mkdir_p(Common::INSTALL_DIR)
    FileUtils.cp "#{Common::BUILD_DIR}/bin/7za", "#{Common::INSTALL_DIR}/7za"
  end

  Cache.add(archive)
  Cache.unpack(archive) if Common.same_platform?

rescue SystemExit => e
  exit e.status
rescue Exception => e
  Logger.log_exception(e)
  exit 1
else
  Builder.clean
end
