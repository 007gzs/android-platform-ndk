#!/usr/bin/env ruby
#
# Build CURL to use it with Crystax NDK
#
# Copyright (c) 2015 CrystaX .NET.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY CrystaX .NET ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CrystaX .NET OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation
# are those of the authors and should not be interpreted as representing
# official policies, either expressed or implied, of CrystaX .NET.
#

require_relative 'versions.rb'

module Crystax

  PKG_NAME = 'curl'

end

require 'fileutils'
require_relative 'logger.rb'
require_relative 'commander.rb'
require_relative 'builder.rb'
require_relative 'cache.rb'


# #define LIBCURL_VERSION "7.41.0-DEV"
#
def check_version
  v = File.read("#{Common::SRC_DIR}/include/curl/curlver.h").split("\n").select { |s| s =~ /LIBCURL_VERSION/ }
  raise "can't find 'LIBCURL_VERSION' string" if !v or v.size == 0
  Crystax::check_version v[0].split(' ')[2].delete('"').split('-')[0]
end


begin
  Common.parse_options

  Logger.open_log_file Common.log_file
  archive = Common.make_archive_name
  Logger.msg "Building #{Crystax::PKG_NAME} for #{Common.target_platform}"

  if Cache.try?(archive)
    Logger.msg "done"
    exit 0
  end

  zlibdir    = Builder.prepare_dependency('zlib')
  openssldir = Builder.prepare_dependency('openssl')
  libssh2dir = Builder.prepare_dependency('libssh2')

  Logger.log_msg "= building #{archive}; args: #{ARGV}"
  check_version
  Builder.copy_sources
  FileUtils.mkdir_p(Common.install_dir)
  prefix = Pathname.new(Common.install_dir).realpath
  FileUtils.cd(Common::BUILD_DIR) do
    Commander.run "./buildconf"
    env = { 'CC' => Builder.cc,
            'CFLAGS' => "#{Builder.cflags} -DCURL_STATICLIB",
            'LANG' => 'C'
          }
    env['LDFLAGS'] = ' -ldl' if Common::target_os == 'linux'
    args = ["--prefix=#{prefix}",
            "--host=#{Builder.configure_host}",
            "--disable-shared",
            "--disable-ldap",
            "--with-ssl=#{openssldir}",
            "--with-zlib=#{zlibdir}",
            "--with-libssh2=#{libssh2dir}",
            "--enable-debug",
            "--with-sysroot=#{Common::NDK_ROOT_DIR}/platform/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.8/sysroot"
           ]
    Commander::run env, "#{Common::SRC_DIR}/configure #{args.join(' ')}"
    Commander::run env, "make -j #{Common::num_jobs}"
    Commander::run env, "make test" unless Common::no_check? or Common.different_os?
    Commander::run env, "make install"
  end

  Cache.add(archive)
  Cache.unpack(archive)

rescue SystemExit => e
  exit e.status
rescue Exception => e
  Logger.log_exception(e)
  exit 1
else
  Builder.clean
end
