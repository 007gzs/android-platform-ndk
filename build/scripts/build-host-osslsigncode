#!/usr/bin/env ruby
#
# Build host osslsigncode tools that will be used to sign windows execurables
# while building Crystax NDK.
#
# The code for osslsigncode should be in the vendor subdirectory.
# Only linux build currently supported.
#
# Copyright (c) 2015 CrystaX .NET.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY CrystaX .NET ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CrystaX .NET OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation
# are those of the authors and should not be interpreted as representing
# official policies, either expressed or implied, of CrystaX .NET.
#

require 'fileutils'
require_relative 'common.rb'
require_relative 'logger.rb'
require_relative 'commander.rb'

PKG_NAME = 'osslsigncode'


# restrict PATH to standard bin dirs
ENV['PATH'] = '/bin:/sbin:/usr/bin:/usr/sbin'
BASE_DIR = File.join('/tmp', "ndk-#{ENV['USER']}", 'host', PKG_NAME)


begin
  # todo: parse options
  options = Options.new
  raise "build not supported on the OS #{options.host_os}" if options.host_os != 'linux'

  Logger.open_log_file "#{BASE_DIR}/build-host-#{PKG_NAME}.log", true, true
  Logger.msg "Building host #{PKG_NAME} tool; OS: #{options.host_os}"

  Logger.msg "= coping source code"
  FileUtils.cp_r "#{Common::VENDOR_DIR}/#{PKG_NAME}", BASE_DIR
  builddir = "#{BASE_DIR}/#{PKG_NAME}"
  installdir = "#{BASE_DIR}/install"
  FileUtils.mkdir_p installdir
  FileUtils.cd(builddir) do
    Commander::run "./autogen.sh"
    Commander::run "./configure --without-curl"
    Commander::run "make -j #{options.num_jobs}"
    FileUtils.cp PKG_NAME, "#{installdir}/"
  end

rescue SystemExit => e
  exit e.status
rescue Exception => e
  Logger.log_exception(e)
  exit 1
else
  #Builder.clean
end
