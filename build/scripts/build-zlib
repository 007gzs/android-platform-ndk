#!/usr/bin/env ruby
#
# Build zip library
#
# Copyright (c) 2015 CrystaX .NET.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY CrystaX .NET ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CrystaX .NET OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation
# are those of the authors and should not be interpreted as representing
# official policies, either expressed or implied, of CrystaX .NET.
#


require_relative 'versions.rb'

module Crystax

  PKG_NAME = 'zlib'

end


require 'fileutils'
require_relative 'logger.rb'
require_relative 'commander.rb'
require_relative 'builder.rb'
require_relative 'cache.rb'
require_relative 'exceptions.rb'



# line: #define ZLIB_VERSION "1.2.8"
def check_version
  v = File.read("#{Common::SRC_DIR}/zlib.h").split("\n").select { |s| s =~ /^#define ZLIB_VERSION/ }
  raise "can't find 'ZLIB_VERSION' string" if !v or v.size == 0
  ver = (v[0].split(' ')[2]).gsub('"', '')
  Crystax::check_version ver
end


begin
  Common.parse_options

  Logger.open_log_file Common.log_file
  archive = Common.make_archive_name
  Logger.msg "Building zlib for #{Common.target_platform}"

  if Cache.try?(archive)
    Logger.msg "done"
    exit 0
  end

  Logger.log_msg "= building #{archive}; args: #{ARGV}"
  check_version
  Builder.copy_sources
  FileUtils.cd(Common::BUILD_DIR) do
    if Common.target_os == 'windows'
      fname = 'win32/Makefile.gcc'
      text = File.read(fname).gsub(/^PREFIX/, '#PREFIX')
      File.open(fname, "w") {|f| f.puts text }
      # chop 'gcc' from the end of the string
      env = { 'PREFIX' => Builder.cc.chop.chop.chop }
      loc = Common.target_cpu == 'x86' ? 'LOC=-m32' : 'LOC=-m64'
      Commander::run env, "make -j #{Common::num_jobs} #{loc} -f win32/Makefile.gcc libz.a"
      FileUtils.mkdir_p ["#{Common.install_dir}/lib", "#{Common.install_dir}/include"]
      FileUtils.cp 'libz.a', "#{Common.install_dir}/lib/"
      FileUtils.cp ['zlib.h', 'zconf.h'], "#{Common.install_dir}/include/"
    else
      env = { 'CC' => Builder.cc,
              'CFLAGS' => Builder.cflags
            }
      args = ["--prefix=#{Common.install_dir}",
              "--static"
             ]
      Commander::run env, "./configure #{args.join(' ')}"
      Commander::run env, "make -j #{Common::num_jobs}"
      Commander::run env, "make check" unless Common.no_check? or Common.different_os?
      Commander::run env, "make install"
      FileUtils.rm_rf ["#{Common.install_dir}/share", "#{Common.install_dir}/lib/pkgconfig"]
    end
  end

  Cache.add(archive)

rescue SystemExit => e
  exit e.status
rescue Exception => e
  Logger.log_exception(e)
  exit 1
else
  Builder.clean
end
