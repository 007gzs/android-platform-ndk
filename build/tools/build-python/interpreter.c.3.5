#include <Python.h>

#define PYTHON3_STDLIB_REL_PATH "stdlib.zip"
#define PYTHON3_MODULES_REL_PATH "modules"

#define SYS_PATH_BUFFER_SIZE (2*(PATH_MAX + 1))


static void GetExecutablePath(char* path)
{
  int size = readlink("/proc/self/exe", path, PATH_MAX);
  if (size < 0)
    size = 0;
  path[size] = 0;
}

static void GetRelativePathFormat(char* base, char* fmt)
{
  unsigned idx;
  char *p, *end;
  end = strrchr(base, '/');
  for (idx = 0, p = base; *p; ++p, ++idx)
  {
    fmt[idx] = *p;
    if (p == end)
      break;
  }
  fmt[++idx] = '%';
  fmt[++idx] = 's';
  fmt[++idx] = 0;
}

int main(int argc, char** argv)
{
  char executable[PATH_MAX + 1] = {0};
  char pthfmt[PATH_MAX + 1]     = {0};
  char stdlibpath[PATH_MAX + 1] = {0};
  char modpath[PATH_MAX + 1]    = {0};
  char syspath[SYS_PATH_BUFFER_SIZE] = {0};
  int retcode = 126;
  int i;

  GetExecutablePath(executable);
  GetRelativePathFormat(executable, pthfmt);

  snprintf(stdlibpath, PATH_MAX, pthfmt, PYTHON3_STDLIB_REL_PATH);
  snprintf(modpath, PATH_MAX, pthfmt, PYTHON3_MODULES_REL_PATH);
  snprintf(syspath, SYS_PATH_BUFFER_SIZE-1, "%s:%s", stdlibpath, modpath);

  char* oldloc = strdup(setlocale(LC_ALL, 0));
  setlocale(LC_ALL, "");

  wchar_t* syspath_w = Py_DecodeLocale(syspath, 0);
  if (syspath_w == 0)
  {
    fprintf(stderr, "Fatal Python error: unable to decode syspath: '%s'\n", syspath);
    goto exit;
  }

  wchar_t** argv_copy = (wchar_t **)PyMem_RawMalloc(sizeof(wchar_t*)*(argc+1));
  wchar_t** argv_copy2 = (wchar_t **)PyMem_RawMalloc(sizeof(wchar_t*)*(argc+1));

  for (i = 0; i < argc; ++i)
  {
    argv_copy[i] = Py_DecodeLocale(argv[i], 0);
    if (argv_copy[i] == 0)
    {
      free(oldloc);
      fprintf(stderr, "Fatal Python error: unable to decode the command line argument #%i\n", i + 1);
      goto exit;
    }
    argv_copy2[i] = argv_copy[i];
  }
  argv_copy2[argc] = argv_copy[argc] = 0;
  setlocale(LC_ALL, oldloc);
  free(oldloc);

  Py_SetPath(syspath_w);
  retcode = Py_Main(argc, argv_copy);

  PyMem_RawFree(syspath_w);
  for (i = 0; i < argc; i++)
  {
    PyMem_RawFree(argv_copy2[i]);
  }
  PyMem_RawFree(argv_copy);
  PyMem_RawFree(argv_copy2);

exit:
  return retcode;
}
