From 5f02950fb578fc2c8fa9093c6910673a6661a910 Mon Sep 17 00:00:00 2001
From: Logan Chien <loganchien@google.com>
Date: Thu, 11 Oct 2012 16:56:40 +0800
Subject: [PATCH] Use __stack_chk_guard as the cookie on Android X86

Due to some bug in bionic pthread, we can't use
%gs:0x14 to store stack protector cookie.  We should
put the stack cookie in __stack_chk_guard global
variable instead.
---
 lib/Target/X86/X86ISelLowering.cpp |    7 +++++++
 lib/Target/X86/X86Subtarget.h      |    3 +++
 2 files changed, 10 insertions(+), 0 deletions(-)

diff --git a/lib/Target/X86/X86ISelLowering.cpp b/lib/Target/X86/X86ISelLowering.cpp
index eaebc59..76ee38c 100644
--- a/lib/Target/X86/X86ISelLowering.cpp
+++ b/lib/Target/X86/X86ISelLowering.cpp
@@ -1432,6 +1432,13 @@ X86TargetLowering::findRepresentativeClass(EVT VT) const{
 
 bool X86TargetLowering::getStackCookieLocation(unsigned &AddressSpace,
                                                unsigned &Offset) const {
+  if (Subtarget->isTargetEnvAndroid()) {
+    // Workaround for Android bionic pthread: On Android %gs:0x14 will be
+    // altered if pthread_setspecific() is called.  Thus, we should use the
+    // global variable __stack_chk_guard instead.
+    return false;
+  }
+
   if (!Subtarget->isTargetLinux())
     return false;
 
diff --git a/lib/Target/X86/X86Subtarget.h b/lib/Target/X86/X86Subtarget.h
index 7fd832b..a1d46c9 100644
--- a/lib/Target/X86/X86Subtarget.h
+++ b/lib/Target/X86/X86Subtarget.h
@@ -247,6 +247,9 @@ public:
   bool isTargetCygMing() const { return TargetTriple.isOSCygMing(); }
   bool isTargetCOFF() const { return TargetTriple.isOSBinFormatCOFF(); }
   bool isTargetEnvMacho() const { return TargetTriple.isEnvironmentMachO(); }
+  bool isTargetEnvAndroid() const {
+    return TargetTriple.getEnvironment() == Triple::ANDROID;
+  }
 
   bool isTargetWin64() const {
     // FIXME: x86_64-cygwin has not been released yet.
-- 
1.7.7.3

