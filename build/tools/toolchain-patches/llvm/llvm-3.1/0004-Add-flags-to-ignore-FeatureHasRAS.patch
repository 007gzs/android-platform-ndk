From 36feb705c20e92a2e25053f6b5d57bcdee0ec3e5 Mon Sep 17 00:00:00 2001
From: Logan Chien <loganchien@google.com>
Date: Wed, 5 Sep 2012 23:32:50 +0800
Subject: [PATCH 4/6] Add flags to ignore FeatureHasRAS.

---
 lib/Target/ARM/ARMSubtarget.cpp |   15 +++++++++++++++
 1 files changed, 15 insertions(+), 0 deletions(-)

diff --git a/lib/Target/ARM/ARMSubtarget.cpp b/lib/Target/ARM/ARMSubtarget.cpp
index e247b76..5b54456 100644
--- a/lib/Target/ARM/ARMSubtarget.cpp
+++ b/lib/Target/ARM/ARMSubtarget.cpp
@@ -34,6 +34,17 @@ static cl::opt<bool>
 StrictAlign("arm-strict-align", cl::Hidden,
             cl::desc("Disallow all unaligned memory accesses"));
 
+// Ignore FeatureHasRAS for All Processors
+//
+// NOTE: The code generator will generate "b.w" instruction for the
+// processors with FeatureHasRAS, when the callee function has
+// "noreturn" attribute.  However, this instruction is not well-
+// supported in several toolchains.  Thus, here's the flag to override
+// the processor-specific attribute.
+static cl::opt<bool>
+IgnoreHasRAS("arm-ignore-has-ras", cl::Hidden, cl::init(false),
+             cl::desc("Ignore FeatureHasRAS for all processors"));
+
 ARMSubtarget::ARMSubtarget(const std::string &TT, const std::string &CPU,
                            const std::string &FS)
   : ARMGenSubtargetInfo(TT, CPU, FS)
@@ -125,6 +136,10 @@ ARMSubtarget::ARMSubtarget(const std::string &TT, const std::string &CPU,
   // configuration.
   if (!StrictAlign && hasV6Ops() && isTargetDarwin())
     AllowsUnalignedMem = true;
+
+  // Ignore HasRAS subtarget feature
+  if (IgnoreHasRAS)
+    HasRAS = false;
 }
 
 /// GVIsIndirectSymbol - true if the GV will be accessed via an indirect symbol.
-- 
1.7.7.3

